import type { Constructor } from '../utils/mixins';
import type { Module } from './Module';
import type { DependencyContainer } from 'tsyringe';
import { InjectionToken } from 'tsyringe';
export { InjectionToken };
export declare class DependencyManager {
    readonly container: DependencyContainer;
    constructor(container?: DependencyContainer);
    registerModules(...modules: Module[]): void;
    registerSingleton<T>(from: InjectionToken<T>, to: InjectionToken<T>): void;
    registerSingleton<T>(token: Constructor<T>): void;
    resolve<T>(token: InjectionToken<T>): T;
    registerInstance<T>(token: InjectionToken<T>, instance: T): void;
    isRegistered<T>(token: InjectionToken<T>): boolean;
    registerContextScoped<T = any>(token: Constructor<T>): void;
    registerContextScoped<T = any>(token: InjectionToken<T>, provider: Constructor<T>): void;
    createChild(): DependencyManager;
}
