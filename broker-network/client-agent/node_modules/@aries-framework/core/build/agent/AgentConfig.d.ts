import type { Logger } from '../logger';
import type { FileSystem } from '../storage/FileSystem';
import type { InitConfig } from '../types';
import type { AgentDependencies } from './AgentDependencies';
import { Subject } from 'rxjs';
import { AutoAcceptCredential } from '../modules/credentials/models/CredentialAutoAcceptType';
import { AutoAcceptProof } from '../modules/proofs/ProofAutoAcceptType';
import { DidCommMimeType } from '../types';
export declare class AgentConfig {
    private initConfig;
    label: string;
    logger: Logger;
    readonly agentDependencies: AgentDependencies;
    readonly fileSystem: FileSystem;
    readonly stop$: Subject<boolean>;
    constructor(initConfig: InitConfig, agentDependencies: AgentDependencies);
    get connectToIndyLedgersOnStartup(): boolean;
    get publicDidSeed(): string | undefined;
    get indyLedgers(): import("..").IndyPoolConfig[];
    get walletConfig(): import("../types").WalletConfig | undefined;
    get autoAcceptConnections(): boolean;
    get autoAcceptProofs(): AutoAcceptProof;
    get autoAcceptCredentials(): AutoAcceptCredential;
    get didCommMimeType(): DidCommMimeType;
    get mediatorPollingInterval(): number;
    get mediatorPickupStrategy(): import("..").MediatorPickupStrategy | undefined;
    get maximumMessagePickup(): number;
    get endpoints(): [string, ...string[]];
    get mediatorConnectionsInvite(): string | undefined;
    get autoAcceptMediationRequests(): boolean;
    get defaultMediatorId(): string | undefined;
    get clearDefaultMediator(): boolean;
    get useLegacyDidSovPrefix(): boolean;
    get connectionImageUrl(): string | undefined;
    get autoUpdateStorageOnStartup(): boolean;
    extend(config: Partial<InitConfig>): AgentConfig;
    toString(): string;
}
