"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = void 0;
const operators_1 = require("rxjs/operators");
const tsyringe_1 = require("tsyringe");
const cache_1 = require("../cache");
const constants_1 = require("../constants");
const JwsService_1 = require("../crypto/JwsService");
const error_1 = require("../error");
const BasicMessagesModule_1 = require("../modules/basic-messages/BasicMessagesModule");
const ConnectionsModule_1 = require("../modules/connections/ConnectionsModule");
const CredentialsModule_1 = require("../modules/credentials/CredentialsModule");
const DidsModule_1 = require("../modules/dids/DidsModule");
const discover_features_1 = require("../modules/discover-features");
const GenericRecordsModule_1 = require("../modules/generic-records/GenericRecordsModule");
const module_1 = require("../modules/indy/module");
const LedgerModule_1 = require("../modules/ledger/LedgerModule");
const OutOfBandModule_1 = require("../modules/oob/OutOfBandModule");
const ProofsModule_1 = require("../modules/proofs/ProofsModule");
const QuestionAnswerModule_1 = require("../modules/question-answer/QuestionAnswerModule");
const MediatorModule_1 = require("../modules/routing/MediatorModule");
const RecipientModule_1 = require("../modules/routing/RecipientModule");
const RoutingService_1 = require("../modules/routing/services/RoutingService");
const plugins_1 = require("../plugins");
const storage_1 = require("../storage");
const InMemoryMessageRepository_1 = require("../storage/InMemoryMessageRepository");
const IndyStorageService_1 = require("../storage/IndyStorageService");
const UpdateAssistant_1 = require("../storage/migration/UpdateAssistant");
const updates_1 = require("../storage/migration/updates");
const IndyWallet_1 = require("../wallet/IndyWallet");
const WalletModule_1 = require("../wallet/WalletModule");
const error_2 = require("../wallet/error");
const AgentConfig_1 = require("./AgentConfig");
const Dispatcher_1 = require("./Dispatcher");
const EnvelopeService_1 = require("./EnvelopeService");
const EventEmitter_1 = require("./EventEmitter");
const Events_1 = require("./Events");
const MessageReceiver_1 = require("./MessageReceiver");
const MessageSender_1 = require("./MessageSender");
const TransportService_1 = require("./TransportService");
class Agent {
    constructor(initialConfig, dependencies, injectionContainer) {
        this._isInitialized = false;
        // Take input container or child container so we don't interfere with anything outside of this agent
        const container = injectionContainer !== null && injectionContainer !== void 0 ? injectionContainer : tsyringe_1.container.createChildContainer();
        this.dependencyManager = new plugins_1.DependencyManager(container);
        this.agentConfig = new AgentConfig_1.AgentConfig(initialConfig, dependencies);
        this.logger = this.agentConfig.logger;
        this.logger.info('Creating agent with config', Object.assign(Object.assign({}, initialConfig), { 
            // Prevent large object being logged.
            // Will display true/false to indicate if value is present in config
            logger: initialConfig.logger != undefined }));
        if (!this.agentConfig.walletConfig) {
            this.logger.warn('Wallet config has not been set on the agent config. ' +
                'Make sure to initialize the wallet yourself before initializing the agent, ' +
                'or provide the required wallet configuration in the agent constructor');
        }
        this.registerDependencies(this.dependencyManager);
        // Resolve instances after everything is registered
        this.eventEmitter = this.dependencyManager.resolve(EventEmitter_1.EventEmitter);
        this.messageSender = this.dependencyManager.resolve(MessageSender_1.MessageSender);
        this.messageReceiver = this.dependencyManager.resolve(MessageReceiver_1.MessageReceiver);
        this.transportService = this.dependencyManager.resolve(TransportService_1.TransportService);
        this.walletService = this.dependencyManager.resolve(constants_1.InjectionSymbols.Wallet);
        this.routingService = this.dependencyManager.resolve(RoutingService_1.RoutingService);
        // We set the modules in the constructor because that allows to set them as read-only
        this.connections = this.dependencyManager.resolve(ConnectionsModule_1.ConnectionsModule);
        this.credentials = this.dependencyManager.resolve(CredentialsModule_1.CredentialsModule);
        this.proofs = this.dependencyManager.resolve(ProofsModule_1.ProofsModule);
        this.mediator = this.dependencyManager.resolve(MediatorModule_1.MediatorModule);
        this.mediationRecipient = this.dependencyManager.resolve(RecipientModule_1.RecipientModule);
        this.basicMessages = this.dependencyManager.resolve(BasicMessagesModule_1.BasicMessagesModule);
        this.questionAnswer = this.dependencyManager.resolve(QuestionAnswerModule_1.QuestionAnswerModule);
        this.genericRecords = this.dependencyManager.resolve(GenericRecordsModule_1.GenericRecordsModule);
        this.ledger = this.dependencyManager.resolve(LedgerModule_1.LedgerModule);
        this.discovery = this.dependencyManager.resolve(discover_features_1.DiscoverFeaturesModule);
        this.dids = this.dependencyManager.resolve(DidsModule_1.DidsModule);
        this.wallet = this.dependencyManager.resolve(WalletModule_1.WalletModule);
        this.oob = this.dependencyManager.resolve(OutOfBandModule_1.OutOfBandModule);
        // Listen for new messages (either from transports or somewhere else in the framework / extensions)
        this.messageSubscription = this.eventEmitter
            .observable(Events_1.AgentEventTypes.AgentMessageReceived)
            .pipe(operators_1.takeUntil(this.agentConfig.stop$), operators_1.concatMap((e) => this.messageReceiver.receiveMessage(e.payload.message, { connection: e.payload.connection })))
            .subscribe();
    }
    registerInboundTransport(inboundTransport) {
        this.messageReceiver.registerInboundTransport(inboundTransport);
    }
    get inboundTransports() {
        return this.messageReceiver.inboundTransports;
    }
    registerOutboundTransport(outboundTransport) {
        this.messageSender.registerOutboundTransport(outboundTransport);
    }
    get outboundTransports() {
        return this.messageSender.outboundTransports;
    }
    get events() {
        return this.eventEmitter;
    }
    get isInitialized() {
        return this._isInitialized && this.wallet.isInitialized;
    }
    async initialize() {
        const { connectToIndyLedgersOnStartup, publicDidSeed, walletConfig, mediatorConnectionsInvite } = this.agentConfig;
        if (this._isInitialized) {
            throw new error_1.AriesFrameworkError('Agent already initialized. Currently it is not supported to re-initialize an already initialized agent.');
        }
        if (!this.wallet.isInitialized && walletConfig) {
            await this.wallet.initialize(walletConfig);
        }
        else if (!this.wallet.isInitialized) {
            throw new error_2.WalletError('Wallet config has not been set on the agent config. ' +
                'Make sure to initialize the wallet yourself before initializing the agent, ' +
                'or provide the required wallet configuration in the agent constructor');
        }
        // Make sure the storage is up to date
        const storageUpdateService = this.dependencyManager.resolve(storage_1.StorageUpdateService);
        const isStorageUpToDate = await storageUpdateService.isUpToDate();
        this.logger.info(`Agent storage is ${isStorageUpToDate ? '' : 'not '}up to date.`);
        if (!isStorageUpToDate && this.agentConfig.autoUpdateStorageOnStartup) {
            const updateAssistant = new UpdateAssistant_1.UpdateAssistant(this, updates_1.DEFAULT_UPDATE_CONFIG);
            await updateAssistant.initialize();
            await updateAssistant.update();
        }
        else if (!isStorageUpToDate) {
            const currentVersion = await storageUpdateService.getCurrentStorageVersion();
            // Close wallet to prevent un-initialized agent with initialized wallet
            await this.wallet.close();
            throw new error_1.AriesFrameworkError(
            // TODO: add link to where documentation on how to update can be found.
            `Current agent storage is not up to date. ` +
                `To prevent the framework state from getting corrupted the agent initialization is aborted. ` +
                `Make sure to update the agent storage (currently at ${currentVersion}) to the latest version (${UpdateAssistant_1.UpdateAssistant.frameworkStorageVersion}). ` +
                `You can also downgrade your version of Aries Framework JavaScript.`);
        }
        if (publicDidSeed) {
            // If an agent has publicDid it will be used as routing key.
            await this.walletService.initPublicDid({ seed: publicDidSeed });
        }
        // As long as value isn't false we will async connect to all genesis pools on startup
        if (connectToIndyLedgersOnStartup) {
            this.ledger.connectToPools().catch((error) => {
                this.logger.warn('Error connecting to ledger, will try to reconnect when needed.', { error });
            });
        }
        for (const transport of this.inboundTransports) {
            await transport.start(this);
        }
        for (const transport of this.outboundTransports) {
            await transport.start(this);
        }
        // Connect to mediator through provided invitation if provided in config
        // Also requests mediation ans sets as default mediator
        // Because this requires the connections module, we do this in the agent constructor
        if (mediatorConnectionsInvite) {
            this.logger.debug('Provision mediation with invitation', { mediatorConnectionsInvite });
            const mediationConnection = await this.getMediationConnection(mediatorConnectionsInvite);
            await this.mediationRecipient.provision(mediationConnection);
        }
        await this.mediationRecipient.initialize();
        this._isInitialized = true;
    }
    async shutdown() {
        // All observables use takeUntil with the stop$ observable
        // this means all observables will stop running if a value is emitted on this observable
        this.agentConfig.stop$.next(true);
        // Stop transports
        const allTransports = [...this.inboundTransports, ...this.outboundTransports];
        const transportPromises = allTransports.map((transport) => transport.stop());
        await Promise.all(transportPromises);
        // close wallet if still initialized
        if (this.wallet.isInitialized) {
            await this.wallet.close();
        }
        this._isInitialized = false;
    }
    get publicDid() {
        return this.walletService.publicDid;
    }
    async receiveMessage(inboundMessage, session) {
        return await this.messageReceiver.receiveMessage(inboundMessage, { session });
    }
    get injectionContainer() {
        return this.dependencyManager.container;
    }
    get config() {
        return this.agentConfig;
    }
    async getMediationConnection(mediatorInvitationUrl) {
        const outOfBandInvitation = this.oob.parseInvitation(mediatorInvitationUrl);
        const outOfBandRecord = await this.oob.findByInvitationId(outOfBandInvitation.id);
        const [connection] = outOfBandRecord ? await this.connections.findAllByOutOfBandId(outOfBandRecord.id) : [];
        if (!connection) {
            this.logger.debug('Mediation connection does not exist, creating connection');
            // We don't want to use the current default mediator when connecting to another mediator
            const routing = await this.routingService.getRouting({ useDefaultMediator: false });
            this.logger.debug('Routing created', routing);
            const { connectionRecord: newConnection } = await this.oob.receiveInvitation(outOfBandInvitation, {
                routing,
            });
            this.logger.debug(`Mediation invitation processed`, { outOfBandInvitation });
            if (!newConnection) {
                throw new error_1.AriesFrameworkError('No connection record to provision mediation.');
            }
            return this.connections.returnWhenIsConnected(newConnection.id);
        }
        if (!connection.isReady) {
            return this.connections.returnWhenIsConnected(connection.id);
        }
        return connection;
    }
    registerDependencies(dependencyManager) {
        dependencyManager.registerInstance(AgentConfig_1.AgentConfig, this.agentConfig);
        // Register internal dependencies
        dependencyManager.registerSingleton(EventEmitter_1.EventEmitter);
        dependencyManager.registerSingleton(MessageSender_1.MessageSender);
        dependencyManager.registerSingleton(MessageReceiver_1.MessageReceiver);
        dependencyManager.registerSingleton(TransportService_1.TransportService);
        dependencyManager.registerSingleton(Dispatcher_1.Dispatcher);
        dependencyManager.registerSingleton(EnvelopeService_1.EnvelopeService);
        dependencyManager.registerSingleton(JwsService_1.JwsService);
        dependencyManager.registerSingleton(cache_1.CacheRepository);
        dependencyManager.registerSingleton(storage_1.DidCommMessageRepository);
        dependencyManager.registerSingleton(storage_1.StorageVersionRepository);
        dependencyManager.registerSingleton(storage_1.StorageUpdateService);
        // Register possibly already defined services
        if (!dependencyManager.isRegistered(constants_1.InjectionSymbols.Wallet)) {
            this.dependencyManager.registerSingleton(IndyWallet_1.IndyWallet);
            const wallet = this.dependencyManager.resolve(IndyWallet_1.IndyWallet);
            dependencyManager.registerInstance(constants_1.InjectionSymbols.Wallet, wallet);
        }
        if (!dependencyManager.isRegistered(constants_1.InjectionSymbols.Logger)) {
            dependencyManager.registerInstance(constants_1.InjectionSymbols.Logger, this.logger);
        }
        if (!dependencyManager.isRegistered(constants_1.InjectionSymbols.StorageService)) {
            dependencyManager.registerSingleton(constants_1.InjectionSymbols.StorageService, IndyStorageService_1.IndyStorageService);
        }
        if (!dependencyManager.isRegistered(constants_1.InjectionSymbols.MessageRepository)) {
            dependencyManager.registerSingleton(constants_1.InjectionSymbols.MessageRepository, InMemoryMessageRepository_1.InMemoryMessageRepository);
        }
        // Register all modules
        dependencyManager.registerModules(ConnectionsModule_1.ConnectionsModule, CredentialsModule_1.CredentialsModule, ProofsModule_1.ProofsModule, MediatorModule_1.MediatorModule, RecipientModule_1.RecipientModule, BasicMessagesModule_1.BasicMessagesModule, QuestionAnswerModule_1.QuestionAnswerModule, GenericRecordsModule_1.GenericRecordsModule, LedgerModule_1.LedgerModule, discover_features_1.DiscoverFeaturesModule, DidsModule_1.DidsModule, WalletModule_1.WalletModule, OutOfBandModule_1.OutOfBandModule, module_1.IndyModule);
    }
}
exports.Agent = Agent;
//# sourceMappingURL=Agent.js.map