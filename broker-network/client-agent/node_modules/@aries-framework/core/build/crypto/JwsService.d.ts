import type { Buffer } from '../utils';
import type { Jws, JwsGeneralFormat } from './JwsTypes';
import { Wallet } from '../wallet';
export declare class JwsService {
    private wallet;
    constructor(wallet: Wallet);
    createJws({ payload, verkey, header }: CreateJwsOptions): Promise<JwsGeneralFormat>;
    /**
     * Verify a a JWS
     */
    verifyJws({ jws, payload }: VerifyJwsOptions): Promise<VerifyJwsResult>;
    /**
     * @todo This currently only work with a single alg, key type and curve
     *    This needs to be extended with other formats in the future
     */
    private buildProtected;
}
export interface CreateJwsOptions {
    verkey: string;
    payload: Buffer;
    header: Record<string, unknown>;
}
export interface VerifyJwsOptions {
    jws: Jws;
    payload: Buffer;
}
export interface VerifyJwsResult {
    isValid: boolean;
    signerVerkeys: string[];
}
