import type { BaseRecord } from './BaseRecord';
import type { StorageService, BaseRecordConstructor, Query } from './StorageService';
import { AgentConfig } from '../agent/AgentConfig';
import { IndyWallet } from '../wallet/IndyWallet';
export declare class IndyStorageService<T extends BaseRecord> implements StorageService<T> {
    private wallet;
    private indy;
    private static DEFAULT_QUERY_OPTIONS;
    constructor(wallet: IndyWallet, agentConfig: AgentConfig);
    private transformToRecordTagValues;
    private transformFromRecordTagValues;
    /**
     * Transforms the search query into a wallet query compatible with indy WQL.
     *
     * The format used by AFJ is almost the same as the indy query, with the exception of
     * the encoding of values, however this is handled by the {@link IndyStorageService.transformToRecordTagValues}
     * method.
     */
    private indyQueryFromSearchQuery;
    private recordToInstance;
    /** @inheritDoc */
    save(record: T): Promise<void>;
    /** @inheritDoc */
    update(record: T): Promise<void>;
    /** @inheritDoc */
    delete(record: T): Promise<void>;
    /** @inheritDoc */
    getById(recordClass: BaseRecordConstructor<T>, id: string): Promise<T>;
    /** @inheritDoc */
    getAll(recordClass: BaseRecordConstructor<T>): Promise<T[]>;
    /** @inheritDoc */
    findByQuery(recordClass: BaseRecordConstructor<T>, query: Query<T>): Promise<T[]>;
    private search;
}
