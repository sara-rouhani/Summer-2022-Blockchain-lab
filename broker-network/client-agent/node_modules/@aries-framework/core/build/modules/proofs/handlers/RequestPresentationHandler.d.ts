import type { AgentConfig } from '../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../agent/Handler';
import type { RoutingService } from '../../routing/services/RoutingService';
import type { ProofResponseCoordinator } from '../ProofResponseCoordinator';
import type { ProofService } from '../services';
import { RequestPresentationMessage } from '../messages';
export declare class RequestPresentationHandler implements Handler {
    private proofService;
    private agentConfig;
    private proofResponseCoordinator;
    private routingService;
    supportedMessages: (typeof RequestPresentationMessage)[];
    constructor(proofService: ProofService, agentConfig: AgentConfig, proofResponseCoordinator: ProofResponseCoordinator, routingService: RoutingService);
    handle(messageContext: HandlerInboundMessage<RequestPresentationHandler>): Promise<import("../../../types").OutboundMessage<import("../messages").PresentationMessage> | import("../../../types").OutboundServiceMessage<import("../messages").PresentationMessage> | undefined>;
    private createPresentation;
}
