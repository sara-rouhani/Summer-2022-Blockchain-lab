"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var QuestionAnswerModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestionAnswerModule = void 0;
const Dispatcher_1 = require("../../agent/Dispatcher");
const MessageSender_1 = require("../../agent/MessageSender");
const helpers_1 = require("../../agent/helpers");
const plugins_1 = require("../../plugins");
const connections_1 = require("../connections");
const handlers_1 = require("./handlers");
const repository_1 = require("./repository");
const services_1 = require("./services");
let QuestionAnswerModule = QuestionAnswerModule_1 = class QuestionAnswerModule {
    constructor(dispatcher, questionAnswerService, messageSender, connectionService) {
        this.questionAnswerService = questionAnswerService;
        this.messageSender = messageSender;
        this.connectionService = connectionService;
        this.registerHandlers(dispatcher);
    }
    /**
     * Create a question message with possible valid responses, then send message to the
     * holder
     *
     * @param connectionId connection to send the question message to
     * @param config config for creating question message
     * @returns QuestionAnswer record
     */
    async sendQuestion(connectionId, config) {
        const connection = await this.connectionService.getById(connectionId);
        connection.assertReady();
        const { questionMessage, questionAnswerRecord } = await this.questionAnswerService.createQuestion(connectionId, {
            question: config.question,
            validResponses: config.validResponses,
            detail: config === null || config === void 0 ? void 0 : config.detail,
        });
        const outboundMessage = helpers_1.createOutboundMessage(connection, questionMessage);
        await this.messageSender.sendMessage(outboundMessage);
        return questionAnswerRecord;
    }
    /**
     * Create an answer message as the holder and send it in response to a question message
     *
     * @param questionRecordId the id of the questionAnswer record
     * @param response response included in the answer message
     * @returns QuestionAnswer record
     */
    async sendAnswer(questionRecordId, response) {
        const questionRecord = await this.questionAnswerService.getById(questionRecordId);
        const { answerMessage, questionAnswerRecord } = await this.questionAnswerService.createAnswer(questionRecord, response);
        const connection = await this.connectionService.getById(questionRecord.connectionId);
        const outboundMessage = helpers_1.createOutboundMessage(connection, answerMessage);
        await this.messageSender.sendMessage(outboundMessage);
        return questionAnswerRecord;
    }
    /**
     * Get all QuestionAnswer records
     *
     * @returns list containing all QuestionAnswer records
     */
    getAll() {
        return this.questionAnswerService.getAll();
    }
    registerHandlers(dispatcher) {
        dispatcher.registerHandler(new handlers_1.QuestionMessageHandler(this.questionAnswerService));
        dispatcher.registerHandler(new handlers_1.AnswerMessageHandler(this.questionAnswerService));
    }
    /**
     * Registers the dependencies of the question answer module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(QuestionAnswerModule_1);
        // Services
        dependencyManager.registerSingleton(services_1.QuestionAnswerService);
        // Repositories
        dependencyManager.registerSingleton(repository_1.QuestionAnswerRepository);
    }
};
QuestionAnswerModule = QuestionAnswerModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __metadata("design:paramtypes", [Dispatcher_1.Dispatcher,
        services_1.QuestionAnswerService,
        MessageSender_1.MessageSender,
        connections_1.ConnectionService])
], QuestionAnswerModule);
exports.QuestionAnswerModule = QuestionAnswerModule;
//# sourceMappingURL=QuestionAnswerModule.js.map