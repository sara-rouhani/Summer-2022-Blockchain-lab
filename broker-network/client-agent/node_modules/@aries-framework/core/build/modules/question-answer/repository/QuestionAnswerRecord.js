"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestionAnswerRecord = void 0;
const error_1 = require("../../../error");
const BaseRecord_1 = require("../../../storage/BaseRecord");
const uuid_1 = require("../../../utils/uuid");
class QuestionAnswerRecord extends BaseRecord_1.BaseRecord {
    constructor(props) {
        var _a, _b, _c;
        super();
        this.type = QuestionAnswerRecord.type;
        if (props) {
            this.id = (_a = props.id) !== null && _a !== void 0 ? _a : uuid_1.uuid();
            this.createdAt = (_b = props.createdAt) !== null && _b !== void 0 ? _b : new Date();
            this.questionText = props.questionText;
            this.questionDetail = props.questionDetail;
            this.validResponses = props.validResponses;
            this.connectionId = props.connectionId;
            this._tags = (_c = props.tags) !== null && _c !== void 0 ? _c : {};
            this.role = props.role;
            this.signatureRequired = props.signatureRequired;
            this.state = props.state;
            this.threadId = props.threadId;
            this.response = props.response;
        }
    }
    getTags() {
        return Object.assign(Object.assign({}, this._tags), { connectionId: this.connectionId, role: this.role, state: this.state, threadId: this.threadId });
    }
    assertState(expectedStates) {
        if (!Array.isArray(expectedStates)) {
            expectedStates = [expectedStates];
        }
        if (!expectedStates.includes(this.state)) {
            throw new error_1.AriesFrameworkError(`Question answer record is in invalid state ${this.state}. Valid states are: ${expectedStates.join(', ')}.`);
        }
    }
}
exports.QuestionAnswerRecord = QuestionAnswerRecord;
QuestionAnswerRecord.type = 'QuestionAnswerRecord';
//# sourceMappingURL=QuestionAnswerRecord.js.map