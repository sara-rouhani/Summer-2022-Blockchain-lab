"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var LedgerModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerModule = void 0;
const constants_1 = require("../../constants");
const error_1 = require("../../error");
const plugins_1 = require("../../plugins");
const services_1 = require("./services");
let LedgerModule = LedgerModule_1 = class LedgerModule {
    constructor(wallet, ledgerService) {
        this.ledgerService = ledgerService;
        this.wallet = wallet;
    }
    /**
     * Connect to all the ledger pools
     */
    async connectToPools() {
        await this.ledgerService.connectToPools();
    }
    async registerPublicDid(did, verkey, alias, role) {
        var _a;
        const myPublicDid = (_a = this.wallet.publicDid) === null || _a === void 0 ? void 0 : _a.did;
        if (!myPublicDid) {
            throw new error_1.AriesFrameworkError('Agent has no public DID.');
        }
        return this.ledgerService.registerPublicDid(myPublicDid, did, verkey, alias, role);
    }
    async getPublicDid(did) {
        return this.ledgerService.getPublicDid(did);
    }
    async registerSchema(schema) {
        var _a;
        const did = (_a = this.wallet.publicDid) === null || _a === void 0 ? void 0 : _a.did;
        if (!did) {
            throw new error_1.AriesFrameworkError('Agent has no public DID.');
        }
        return this.ledgerService.registerSchema(did, schema);
    }
    async getSchema(id) {
        return this.ledgerService.getSchema(id);
    }
    async registerCredentialDefinition(credentialDefinitionTemplate) {
        var _a;
        const did = (_a = this.wallet.publicDid) === null || _a === void 0 ? void 0 : _a.did;
        if (!did) {
            throw new error_1.AriesFrameworkError('Agent has no public DID.');
        }
        return this.ledgerService.registerCredentialDefinition(did, Object.assign(Object.assign({}, credentialDefinitionTemplate), { signatureType: 'CL' }));
    }
    async getCredentialDefinition(id) {
        return this.ledgerService.getCredentialDefinition(id);
    }
    async getRevocationRegistryDefinition(revocationRegistryDefinitionId) {
        return this.ledgerService.getRevocationRegistryDefinition(revocationRegistryDefinitionId);
    }
    async getRevocationRegistryDelta(revocationRegistryDefinitionId, fromSeconds = 0, toSeconds = new Date().getTime()) {
        return this.ledgerService.getRevocationRegistryDelta(revocationRegistryDefinitionId, fromSeconds, toSeconds);
    }
    /**
     * Registers the dependencies of the ledger module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(LedgerModule_1);
        // Services
        dependencyManager.registerSingleton(services_1.IndyLedgerService);
        dependencyManager.registerSingleton(services_1.IndyPoolService);
    }
};
LedgerModule = LedgerModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __param(0, plugins_1.inject(constants_1.InjectionSymbols.Wallet)),
    __metadata("design:paramtypes", [Object, services_1.IndyLedgerService])
], LedgerModule);
exports.LedgerModule = LedgerModule;
//# sourceMappingURL=LedgerModule.js.map