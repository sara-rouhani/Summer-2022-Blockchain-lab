"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyLedgerService = void 0;
const AgentConfig_1 = require("../../../agent/AgentConfig");
const IndySdkError_1 = require("../../../error/IndySdkError");
const plugins_1 = require("../../../plugins");
const did_1 = require("../../../utils/did");
const indyError_1 = require("../../../utils/indyError");
const IndyWallet_1 = require("../../../wallet/IndyWallet");
const IndyIssuerService_1 = require("../../indy/services/IndyIssuerService");
const LedgerError_1 = require("../error/LedgerError");
const IndyPoolService_1 = require("./IndyPoolService");
let IndyLedgerService = class IndyLedgerService {
    constructor(wallet, agentConfig, indyIssuer, indyPoolService) {
        this.wallet = wallet;
        this.indy = agentConfig.agentDependencies.indy;
        this.logger = agentConfig.logger;
        this.indyIssuer = indyIssuer;
        this.indyPoolService = indyPoolService;
    }
    async connectToPools() {
        return this.indyPoolService.connectToPools();
    }
    async registerPublicDid(submitterDid, targetDid, verkey, alias, role) {
        const pool = this.indyPoolService.ledgerWritePool;
        try {
            this.logger.debug(`Register public did '${targetDid}' on ledger '${pool.id}'`);
            const request = await this.indy.buildNymRequest(submitterDid, targetDid, verkey, alias, role || null);
            const response = await this.submitWriteRequest(pool, request, submitterDid);
            this.logger.debug(`Registered public did '${targetDid}' on ledger '${pool.id}'`, {
                response,
            });
            return targetDid;
        }
        catch (error) {
            this.logger.error(`Error registering public did '${targetDid}' on ledger '${pool.id}'`, {
                error,
                submitterDid,
                targetDid,
                verkey,
                alias,
                role,
                pool,
            });
            throw error;
        }
    }
    async getPublicDid(did) {
        // Getting the pool for a did also retrieves the DID. We can just use that
        const { did: didResponse } = await this.indyPoolService.getPoolForDid(did);
        return didResponse;
    }
    async getEndpointsForDid(did) {
        var _a;
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        try {
            this.logger.debug(`Get endpoints for did '${did}' from ledger '${pool.id}'`);
            const request = await this.indy.buildGetAttribRequest(null, did, 'endpoint', null, null);
            this.logger.debug(`Submitting get endpoint ATTRIB request for did '${did}' to ledger '${pool.id}'`);
            const response = await this.submitReadRequest(pool, request);
            if (!response.result.data)
                return {};
            const endpoints = (_a = JSON.parse(response.result.data)) === null || _a === void 0 ? void 0 : _a.endpoint;
            this.logger.debug(`Got endpoints '${JSON.stringify(endpoints)}' for did '${did}' from ledger '${pool.id}'`, {
                response,
                endpoints,
            });
            return endpoints !== null && endpoints !== void 0 ? endpoints : {};
        }
        catch (error) {
            this.logger.error(`Error retrieving endpoints for did '${did}' from ledger '${pool.id}'`, {
                error,
            });
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async registerSchema(did, schemaTemplate) {
        const pool = this.indyPoolService.ledgerWritePool;
        try {
            this.logger.debug(`Register schema on ledger '${pool.id}' with did '${did}'`, schemaTemplate);
            const { name, attributes, version } = schemaTemplate;
            const schema = await this.indyIssuer.createSchema({ originDid: did, name, version, attributes });
            const request = await this.indy.buildSchemaRequest(did, schema);
            const response = await this.submitWriteRequest(pool, request, did);
            this.logger.debug(`Registered schema '${schema.id}' on ledger '${pool.id}'`, {
                response,
                schema,
            });
            schema.seqNo = response.result.txnMetadata.seqNo;
            return schema;
        }
        catch (error) {
            this.logger.error(`Error registering schema for did '${did}' on ledger '${pool.id}'`, {
                error,
                did,
                schemaTemplate,
            });
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async getSchema(schemaId) {
        const did = did_1.didFromSchemaId(schemaId);
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        try {
            this.logger.debug(`Getting schema '${schemaId}' from ledger '${pool.id}'`);
            const request = await this.indy.buildGetSchemaRequest(null, schemaId);
            this.logger.trace(`Submitting get schema request for schema '${schemaId}' to ledger '${pool.id}'`);
            const response = await this.submitReadRequest(pool, request);
            this.logger.trace(`Got un-parsed schema '${schemaId}' from ledger '${pool.id}'`, {
                response,
            });
            const [, schema] = await this.indy.parseGetSchemaResponse(response);
            this.logger.debug(`Got schema '${schemaId}' from ledger '${pool.id}'`, {
                schema,
            });
            return schema;
        }
        catch (error) {
            this.logger.error(`Error retrieving schema '${schemaId}' from ledger '${pool.id}'`, {
                error,
                schemaId,
            });
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async registerCredentialDefinition(did, credentialDefinitionTemplate) {
        const pool = this.indyPoolService.ledgerWritePool;
        try {
            this.logger.debug(`Registering credential definition on ledger '${pool.id}' with did '${did}'`, credentialDefinitionTemplate);
            const { schema, tag, signatureType, supportRevocation } = credentialDefinitionTemplate;
            const credentialDefinition = await this.indyIssuer.createCredentialDefinition({
                issuerDid: did,
                schema,
                tag,
                signatureType,
                supportRevocation,
            });
            const request = await this.indy.buildCredDefRequest(did, credentialDefinition);
            const response = await this.submitWriteRequest(pool, request, did);
            this.logger.debug(`Registered credential definition '${credentialDefinition.id}' on ledger '${pool.id}'`, {
                response,
                credentialDefinition: credentialDefinition,
            });
            return credentialDefinition;
        }
        catch (error) {
            this.logger.error(`Error registering credential definition for schema '${credentialDefinitionTemplate.schema.id}' on ledger '${pool.id}'`, {
                error,
                did,
                credentialDefinitionTemplate,
            });
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async getCredentialDefinition(credentialDefinitionId) {
        const did = did_1.didFromCredentialDefinitionId(credentialDefinitionId);
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        this.logger.debug(`Using ledger '${pool.id}' to retrieve credential definition '${credentialDefinitionId}'`);
        try {
            const request = await this.indy.buildGetCredDefRequest(null, credentialDefinitionId);
            this.logger.trace(`Submitting get credential definition request for credential definition '${credentialDefinitionId}' to ledger '${pool.id}'`);
            const response = await this.submitReadRequest(pool, request);
            this.logger.trace(`Got un-parsed credential definition '${credentialDefinitionId}' from ledger '${pool.id}'`, {
                response,
            });
            const [, credentialDefinition] = await this.indy.parseGetCredDefResponse(response);
            this.logger.debug(`Got credential definition '${credentialDefinitionId}' from ledger '${pool.id}'`, {
                credentialDefinition,
            });
            return credentialDefinition;
        }
        catch (error) {
            this.logger.error(`Error retrieving credential definition '${credentialDefinitionId}' from ledger '${pool.id}'`, {
                error,
                credentialDefinitionId,
                pool: pool.id,
            });
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async getRevocationRegistryDefinition(revocationRegistryDefinitionId) {
        const did = did_1.didFromRevocationRegistryDefinitionId(revocationRegistryDefinitionId);
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        this.logger.debug(`Using ledger '${pool.id}' to retrieve revocation registry definition '${revocationRegistryDefinitionId}'`);
        try {
            //TODO - implement a cache
            this.logger.trace(`Revocation Registry Definition '${revocationRegistryDefinitionId}' not cached, retrieving from ledger`);
            const request = await this.indy.buildGetRevocRegDefRequest(null, revocationRegistryDefinitionId);
            this.logger.trace(`Submitting get revocation registry definition request for revocation registry definition '${revocationRegistryDefinitionId}' to ledger`);
            const response = await this.submitReadRequest(pool, request);
            this.logger.trace(`Got un-parsed revocation registry definition '${revocationRegistryDefinitionId}' from ledger '${pool.id}'`, {
                response,
            });
            const [, revocationRegistryDefinition] = await this.indy.parseGetRevocRegDefResponse(response);
            this.logger.debug(`Got revocation registry definition '${revocationRegistryDefinitionId}' from ledger`, {
                revocationRegistryDefinition,
            });
            return { revocationRegistryDefinition, revocationRegistryDefinitionTxnTime: response.result.txnTime };
        }
        catch (error) {
            this.logger.error(`Error retrieving revocation registry definition '${revocationRegistryDefinitionId}' from ledger`, {
                error,
                revocationRegistryDefinitionId: revocationRegistryDefinitionId,
                pool: pool.id,
            });
            throw error;
        }
    }
    //Retrieves the accumulated state of a revocation registry by id given a revocation interval from & to (used primarily for proof creation)
    async getRevocationRegistryDelta(revocationRegistryDefinitionId, to = new Date().getTime(), from = 0) {
        //TODO - implement a cache
        const did = did_1.didFromRevocationRegistryDefinitionId(revocationRegistryDefinitionId);
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        this.logger.debug(`Using ledger '${pool.id}' to retrieve revocation registry delta with revocation registry definition id: '${revocationRegistryDefinitionId}'`, {
            to,
            from,
        });
        try {
            const request = await this.indy.buildGetRevocRegDeltaRequest(null, revocationRegistryDefinitionId, from, to);
            this.logger.trace(`Submitting get revocation registry delta request for revocation registry '${revocationRegistryDefinitionId}' to ledger`);
            const response = await this.submitReadRequest(pool, request);
            this.logger.trace(`Got revocation registry delta unparsed-response '${revocationRegistryDefinitionId}' from ledger`, {
                response,
            });
            const [, revocationRegistryDelta, deltaTimestamp] = await this.indy.parseGetRevocRegDeltaResponse(response);
            this.logger.debug(`Got revocation registry delta '${revocationRegistryDefinitionId}' from ledger`, {
                revocationRegistryDelta,
                deltaTimestamp,
                to,
                from,
            });
            return { revocationRegistryDelta, deltaTimestamp };
        }
        catch (error) {
            this.logger.error(`Error retrieving revocation registry delta '${revocationRegistryDefinitionId}' from ledger, potentially revocation interval ends before revocation registry creation?"`, {
                error,
                revocationRegistryId: revocationRegistryDefinitionId,
                pool: pool.id,
            });
            throw error;
        }
    }
    //Retrieves the accumulated state of a revocation registry by id given a timestamp (used primarily for verification)
    async getRevocationRegistry(revocationRegistryDefinitionId, timestamp) {
        //TODO - implement a cache
        const did = did_1.didFromRevocationRegistryDefinitionId(revocationRegistryDefinitionId);
        const { pool } = await this.indyPoolService.getPoolForDid(did);
        this.logger.debug(`Using ledger '${pool.id}' to retrieve revocation registry accumulated state with revocation registry definition id: '${revocationRegistryDefinitionId}'`, {
            timestamp,
        });
        try {
            const request = await this.indy.buildGetRevocRegRequest(null, revocationRegistryDefinitionId, timestamp);
            this.logger.trace(`Submitting get revocation registry request for revocation registry '${revocationRegistryDefinitionId}' to ledger`);
            const response = await this.submitReadRequest(pool, request);
            this.logger.trace(`Got un-parsed revocation registry '${revocationRegistryDefinitionId}' from ledger '${pool.id}'`, {
                response,
            });
            const [, revocationRegistry, ledgerTimestamp] = await this.indy.parseGetRevocRegResponse(response);
            this.logger.debug(`Got revocation registry '${revocationRegistryDefinitionId}' from ledger`, {
                ledgerTimestamp,
                revocationRegistry,
            });
            return { revocationRegistry, ledgerTimestamp };
        }
        catch (error) {
            this.logger.error(`Error retrieving revocation registry '${revocationRegistryDefinitionId}' from ledger`, {
                error,
                revocationRegistryId: revocationRegistryDefinitionId,
                pool: pool.id,
            });
            throw error;
        }
    }
    async submitWriteRequest(pool, request, signDid) {
        try {
            const requestWithTaa = await this.appendTaa(pool, request);
            const signedRequestWithTaa = await this.signRequest(signDid, requestWithTaa);
            const response = await pool.submitWriteRequest(signedRequestWithTaa);
            return response;
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async submitReadRequest(pool, request) {
        try {
            const response = await pool.submitReadRequest(request);
            return response;
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async signRequest(did, request) {
        try {
            return this.indy.signRequest(this.wallet.handle, did, request);
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async appendTaa(pool, request) {
        try {
            const authorAgreement = await this.getTransactionAuthorAgreement(pool);
            const taa = pool.config.transactionAuthorAgreement;
            // If ledger does not have TAA, we can just send request
            if (authorAgreement == null) {
                return request;
            }
            // Ledger has taa but user has not specified which one to use
            if (!taa) {
                throw new LedgerError_1.LedgerError(`Please, specify a transaction author agreement with version and acceptance mechanism. ${JSON.stringify(authorAgreement)}`);
            }
            // Throw an error if the pool doesn't have the specified version and acceptance mechanism
            if (authorAgreement.acceptanceMechanisms.version !== taa.version ||
                !(taa.acceptanceMechanism in authorAgreement.acceptanceMechanisms.aml)) {
                // Throw an error with a helpful message
                const errMessage = `Unable to satisfy matching TAA with mechanism ${JSON.stringify(taa.acceptanceMechanism)} and version ${JSON.stringify(taa.version)} in pool.\n Found ${JSON.stringify(Object.keys(authorAgreement.acceptanceMechanisms.aml))} and version ${authorAgreement.acceptanceMechanisms.version} in pool.`;
                throw new LedgerError_1.LedgerError(errMessage);
            }
            const requestWithTaa = await this.indy.appendTxnAuthorAgreementAcceptanceToRequest(request, authorAgreement.text, taa.version, authorAgreement.digest, taa.acceptanceMechanism, 
            // Current time since epoch
            // We can't use ratification_ts, as it must be greater than 1499906902
            Math.floor(new Date().getTime() / 1000));
            return requestWithTaa;
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    async getTransactionAuthorAgreement(pool) {
        try {
            // TODO Replace this condition with memoization
            if (pool.authorAgreement !== undefined) {
                return pool.authorAgreement;
            }
            const taaRequest = await this.indy.buildGetTxnAuthorAgreementRequest(null);
            const taaResponse = await this.submitReadRequest(pool, taaRequest);
            const acceptanceMechanismRequest = await this.indy.buildGetAcceptanceMechanismsRequest(null);
            const acceptanceMechanismResponse = await this.submitReadRequest(pool, acceptanceMechanismRequest);
            // TAA can be null
            if (taaResponse.result.data == null) {
                pool.authorAgreement = null;
                return null;
            }
            // If TAA is not null, we can be sure AcceptanceMechanisms is also not null
            const authorAgreement = taaResponse.result.data;
            const acceptanceMechanisms = acceptanceMechanismResponse.result.data;
            pool.authorAgreement = Object.assign(Object.assign({}, authorAgreement), { acceptanceMechanisms });
            return pool.authorAgreement;
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
};
IndyLedgerService = __decorate([
    plugins_1.injectable(),
    __metadata("design:paramtypes", [IndyWallet_1.IndyWallet,
        AgentConfig_1.AgentConfig,
        IndyIssuerService_1.IndyIssuerService,
        IndyPoolService_1.IndyPoolService])
], IndyLedgerService);
exports.IndyLedgerService = IndyLedgerService;
//# sourceMappingURL=IndyLedgerService.js.map