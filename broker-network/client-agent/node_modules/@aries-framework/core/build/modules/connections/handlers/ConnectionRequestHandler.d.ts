import type { AgentConfig } from '../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../agent/Handler';
import type { DidRepository } from '../../dids/repository';
import type { OutOfBandService } from '../../oob/OutOfBandService';
import type { RoutingService } from '../../routing/services/RoutingService';
import type { ConnectionService } from '../services/ConnectionService';
import { ConnectionRequestMessage } from '../messages';
export declare class ConnectionRequestHandler implements Handler {
    private agentConfig;
    private connectionService;
    private outOfBandService;
    private routingService;
    private didRepository;
    supportedMessages: (typeof ConnectionRequestMessage)[];
    constructor(agentConfig: AgentConfig, connectionService: ConnectionService, outOfBandService: OutOfBandService, routingService: RoutingService, didRepository: DidRepository);
    handle(messageContext: HandlerInboundMessage<ConnectionRequestHandler>): Promise<import("../../../types").OutboundMessage<import("../messages").ConnectionResponseMessage> | undefined>;
}
