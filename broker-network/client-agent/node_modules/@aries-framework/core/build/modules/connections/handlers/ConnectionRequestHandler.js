"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionRequestHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const AriesFrameworkError_1 = require("../../../error/AriesFrameworkError");
const messages_1 = require("../messages");
class ConnectionRequestHandler {
    constructor(agentConfig, connectionService, outOfBandService, routingService, didRepository) {
        this.supportedMessages = [messages_1.ConnectionRequestMessage];
        this.agentConfig = agentConfig;
        this.connectionService = connectionService;
        this.outOfBandService = outOfBandService;
        this.routingService = routingService;
        this.didRepository = didRepository;
    }
    async handle(messageContext) {
        var _a;
        const { connection, recipientKey, senderKey } = messageContext;
        if (!recipientKey || !senderKey) {
            throw new AriesFrameworkError_1.AriesFrameworkError('Unable to process connection request without senderVerkey or recipientKey');
        }
        const outOfBandRecord = await this.outOfBandService.findByRecipientKey(recipientKey);
        if (!outOfBandRecord) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Out-of-band record for recipient key ${recipientKey.fingerprint} was not found.`);
        }
        if (connection && !outOfBandRecord.reusable) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Connection record for non-reusable out-of-band ${outOfBandRecord.id} already exists.`);
        }
        const didRecord = await this.didRepository.findByRecipientKey(senderKey);
        if (didRecord) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Did record for sender key ${senderKey.fingerprint} already exists.`);
        }
        const connectionRecord = await this.connectionService.processRequest(messageContext, outOfBandRecord);
        if ((_a = connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.autoAcceptConnection) !== null && _a !== void 0 ? _a : this.agentConfig.autoAcceptConnections) {
            // TODO: Allow rotation of keys used in the invitation for new ones not only when out-of-band is reusable
            const routing = outOfBandRecord.reusable ? await this.routingService.getRouting() : undefined;
            const { message } = await this.connectionService.createResponse(connectionRecord, outOfBandRecord, routing);
            return helpers_1.createOutboundMessage(connectionRecord, message, outOfBandRecord);
        }
    }
}
exports.ConnectionRequestHandler = ConnectionRequestHandler;
//# sourceMappingURL=ConnectionRequestHandler.js.map