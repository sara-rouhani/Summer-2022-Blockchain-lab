"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2RequestCredentialHandler = void 0;
const helpers_1 = require("../../../../../agent/helpers");
const storage_1 = require("../../../../../storage");
const V2OfferCredentialMessage_1 = require("../messages/V2OfferCredentialMessage");
const V2RequestCredentialMessage_1 = require("../messages/V2RequestCredentialMessage");
class V2RequestCredentialHandler {
    constructor(credentialService, agentConfig, didCommMessageRepository) {
        this.supportedMessages = [V2RequestCredentialMessage_1.V2RequestCredentialMessage];
        this.credentialService = credentialService;
        this.agentConfig = agentConfig;
        this.didCommMessageRepository = didCommMessageRepository;
    }
    async handle(messageContext) {
        const credentialRecord = await this.credentialService.processRequest(messageContext);
        const shouldAutoRespond = await this.credentialService.shouldAutoRespondToRequest({
            credentialRecord,
            requestMessage: messageContext.message,
        });
        if (shouldAutoRespond) {
            return await this.acceptRequest(credentialRecord, messageContext);
        }
    }
    async acceptRequest(credentialRecord, messageContext) {
        this.agentConfig.logger.info(`Automatically sending credential with autoAccept on ${this.agentConfig.autoAcceptCredentials}`);
        const offerMessage = await this.didCommMessageRepository.findAgentMessage({
            associatedRecordId: credentialRecord.id,
            messageClass: V2OfferCredentialMessage_1.V2OfferCredentialMessage,
        });
        const { message } = await this.credentialService.acceptRequest({
            credentialRecord,
        });
        if (messageContext.connection) {
            return helpers_1.createOutboundMessage(messageContext.connection, message);
        }
        else if (messageContext.message.service && (offerMessage === null || offerMessage === void 0 ? void 0 : offerMessage.service)) {
            const recipientService = messageContext.message.service;
            const ourService = offerMessage.service;
            // Set ~service, update message in record (for later use)
            message.setService(ourService);
            await this.didCommMessageRepository.saveOrUpdateAgentMessage({
                agentMessage: message,
                associatedRecordId: credentialRecord.id,
                role: storage_1.DidCommMessageRole.Sender,
            });
            return helpers_1.createOutboundServiceMessage({
                payload: message,
                service: recipientService.resolvedDidCommService,
                senderKey: ourService.resolvedDidCommService.recipientKeys[0],
            });
        }
        this.agentConfig.logger.error(`Could not automatically create credential request`);
    }
}
exports.V2RequestCredentialHandler = V2RequestCredentialHandler;
//# sourceMappingURL=V2RequestCredentialHandler.js.map