"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1OfferCredentialHandler = void 0;
const helpers_1 = require("../../../../../agent/helpers");
const ServiceDecorator_1 = require("../../../../../decorators/service/ServiceDecorator");
const storage_1 = require("../../../../../storage");
const messages_1 = require("../messages");
class V1OfferCredentialHandler {
    constructor(credentialService, agentConfig, routingService, didCommMessageRepository) {
        this.supportedMessages = [messages_1.V1OfferCredentialMessage];
        this.credentialService = credentialService;
        this.agentConfig = agentConfig;
        this.routingService = routingService;
        this.didCommMessageRepository = didCommMessageRepository;
    }
    async handle(messageContext) {
        const credentialRecord = await this.credentialService.processOffer(messageContext);
        const shouldAutoRespond = await this.credentialService.shouldAutoRespondToOffer({
            credentialRecord,
            offerMessage: messageContext.message,
        });
        if (shouldAutoRespond) {
            return await this.acceptOffer(credentialRecord, messageContext);
        }
    }
    async acceptOffer(credentialRecord, messageContext) {
        this.agentConfig.logger.info(`Automatically sending request with autoAccept on ${this.agentConfig.autoAcceptCredentials}`);
        if (messageContext.connection) {
            const { message } = await this.credentialService.acceptOffer({ credentialRecord });
            return helpers_1.createOutboundMessage(messageContext.connection, message);
        }
        else if (messageContext.message.service) {
            const routing = await this.routingService.getRouting();
            const ourService = new ServiceDecorator_1.ServiceDecorator({
                serviceEndpoint: routing.endpoints[0],
                recipientKeys: [routing.recipientKey.publicKeyBase58],
                routingKeys: routing.routingKeys.map((key) => key.publicKeyBase58),
            });
            const recipientService = messageContext.message.service;
            const { message } = await this.credentialService.acceptOffer({
                credentialRecord,
                credentialFormats: {
                    indy: {
                        holderDid: ourService.recipientKeys[0],
                    },
                },
            });
            // Set and save ~service decorator to record (to remember our verkey)
            message.service = ourService;
            await this.didCommMessageRepository.saveOrUpdateAgentMessage({
                agentMessage: message,
                role: storage_1.DidCommMessageRole.Sender,
                associatedRecordId: credentialRecord.id,
            });
            return helpers_1.createOutboundServiceMessage({
                payload: message,
                service: recipientService.resolvedDidCommService,
                senderKey: ourService.resolvedDidCommService.recipientKeys[0],
            });
        }
        this.agentConfig.logger.error(`Could not automatically create credential request`);
    }
}
exports.V1OfferCredentialHandler = V1OfferCredentialHandler;
//# sourceMappingURL=V1OfferCredentialHandler.js.map