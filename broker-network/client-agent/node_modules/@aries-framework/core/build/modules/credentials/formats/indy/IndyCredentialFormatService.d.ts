import type { Attachment } from '../../../../decorators/attachment/Attachment';
import type { FormatAutoRespondCredentialOptions, FormatAcceptOfferOptions, FormatAcceptProposalOptions, FormatAcceptRequestOptions, FormatCreateOfferOptions, FormatCreateOfferReturn, FormatCreateProposalOptions, FormatCreateProposalReturn, FormatCreateReturn, FormatProcessOptions, FormatAutoRespondOfferOptions, FormatAutoRespondProposalOptions, FormatAutoRespondRequestOptions } from '../CredentialFormatServiceOptions';
import type { IndyCredentialFormat } from './IndyCredentialFormat';
import { AgentConfig } from '../../../../agent/AgentConfig';
import { EventEmitter } from '../../../../agent/EventEmitter';
import { Wallet } from '../../../../wallet/Wallet';
import { ConnectionService } from '../../../connections';
import { DidResolverService } from '../../../dids';
import { IndyHolderService, IndyIssuerService } from '../../../indy';
import { IndyLedgerService } from '../../../ledger';
import { CredentialFormatSpec } from '../../models/CredentialFormatSpec';
import { CredentialRepository } from '../../repository/CredentialRepository';
import { CredentialFormatService } from '../CredentialFormatService';
export declare class IndyCredentialFormatService extends CredentialFormatService<IndyCredentialFormat> {
    private indyIssuerService;
    private indyLedgerService;
    private indyHolderService;
    private connectionService;
    private didResolver;
    private wallet;
    private logger;
    constructor(credentialRepository: CredentialRepository, eventEmitter: EventEmitter, indyIssuerService: IndyIssuerService, indyLedgerService: IndyLedgerService, indyHolderService: IndyHolderService, connectionService: ConnectionService, didResolver: DidResolverService, agentConfig: AgentConfig, wallet: Wallet);
    readonly formatKey: "indy";
    readonly credentialRecordType: "indy";
    /**
     * Create a {@link AttachmentFormats} object dependent on the message type.
     *
     * @param options The object containing all the options for the proposed credential
     * @returns object containing associated attachment, format and optionally the credential preview
     *
     */
    createProposal({ credentialFormats, credentialRecord, }: FormatCreateProposalOptions<IndyCredentialFormat>): Promise<FormatCreateProposalReturn>;
    processProposal({ attachment }: FormatProcessOptions): Promise<void>;
    acceptProposal({ attachId, credentialFormats, credentialRecord, proposalAttachment, }: FormatAcceptProposalOptions<IndyCredentialFormat>): Promise<FormatCreateOfferReturn>;
    /**
     * Create a {@link AttachmentFormats} object dependent on the message type.
     *
     * @param options The object containing all the options for the credential offer
     * @param messageType the type of message which can be Indy, JsonLd etc eg "CRED_20_OFFER"
     * @returns object containing associated attachment, formats and offersAttach elements
     *
     */
    createOffer({ credentialFormats, credentialRecord, attachId, }: FormatCreateOfferOptions<IndyCredentialFormat>): Promise<FormatCreateOfferReturn>;
    processOffer({ attachment, credentialRecord }: FormatProcessOptions): Promise<void>;
    acceptOffer({ credentialFormats, credentialRecord, attachId, offerAttachment, }: FormatAcceptOfferOptions<IndyCredentialFormat>): Promise<FormatCreateReturn>;
    /**
     * Starting from a request is not supported for indy credentials, this method only throws an error.
     */
    createRequest(): Promise<FormatCreateReturn>;
    /**
     * We don't have any models to validate an indy request object, for now this method does nothing
     */
    processRequest(options: FormatProcessOptions): Promise<void>;
    acceptRequest({ credentialRecord, attachId, offerAttachment, requestAttachment, }: FormatAcceptRequestOptions<IndyCredentialFormat>): Promise<FormatCreateReturn>;
    /**
     * Processes an incoming credential - retrieve metadata, retrieve payload and store it in the Indy wallet
     * @param options the issue credential message wrapped inside this object
     * @param credentialRecord the credential exchange record for this credential
     */
    processCredential({ credentialRecord, attachment }: FormatProcessOptions): Promise<void>;
    supportsFormat(format: string): boolean;
    /**
     * Gets the attachment object for a given attachId. We need to get out the correct attachId for
     * indy and then find the corresponding attachment (if there is one)
     * @param formats the formats object containing the attachId
     * @param messageAttachments the attachments containing the payload
     * @returns The Attachment if found or undefined
     *
     */
    getAttachment(formats: CredentialFormatSpec[], messageAttachments: Attachment[]): Attachment | undefined;
    deleteCredentialById(credentialRecordId: string): Promise<void>;
    shouldAutoRespondToProposal({ offerAttachment, proposalAttachment }: FormatAutoRespondProposalOptions): boolean;
    shouldAutoRespondToOffer({ offerAttachment, proposalAttachment }: FormatAutoRespondOfferOptions): boolean;
    shouldAutoRespondToRequest({ offerAttachment, requestAttachment }: FormatAutoRespondRequestOptions): boolean;
    shouldAutoRespondToCredential({ credentialRecord, requestAttachment, credentialAttachment, }: FormatAutoRespondCredentialOptions): boolean;
    private createIndyOffer;
    private assertPreviewAttributesMatchSchemaAttributes;
    private getIndyHolderDid;
    /**
     * Get linked attachments for indy format from a proposal message. This allows attachments
     * to be copied across to old style credential records
     *
     * @param options ProposeCredentialOptions object containing (optionally) the linked attachments
     * @return array of linked attachments or undefined if none present
     */
    private getCredentialLinkedAttachments;
}
