"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialService = void 0;
const utils_1 = require("../../../utils");
const CredentialState_1 = require("../models/CredentialState");
const CredentialEvents_1 = require("./../CredentialEvents");
class CredentialService {
    constructor(credentialRepository, didCommMessageRepository, eventEmitter, dispatcher, agentConfig) {
        this.credentialRepository = credentialRepository;
        this.didCommMessageRepository = didCommMessageRepository;
        this.eventEmitter = eventEmitter;
        this.dispatcher = dispatcher;
        this.agentConfig = agentConfig;
        this.logger = this.agentConfig.logger;
    }
    /**
     * Decline a credential offer
     * @param credentialRecord The credential to be declined
     */
    async declineOffer(credentialRecord) {
        credentialRecord.assertState(CredentialState_1.CredentialState.OfferReceived);
        await this.updateState(credentialRecord, CredentialState_1.CredentialState.Declined);
        return credentialRecord;
    }
    /**
     * Process a received credential {@link ProblemReportMessage}.
     *
     * @param messageContext The message context containing a credential problem report message
     * @returns credential record associated with the credential problem report message
     */
    async processProblemReport(messageContext) {
        const { message: credentialProblemReportMessage } = messageContext;
        const connection = messageContext.assertReadyConnection();
        this.logger.debug(`Processing problem report with id ${credentialProblemReportMessage.id}`);
        const credentialRecord = await this.getByThreadAndConnectionId(credentialProblemReportMessage.threadId, connection.id);
        // Update record
        credentialRecord.errorMessage = `${credentialProblemReportMessage.description.code}: ${credentialProblemReportMessage.description.en}`;
        await this.update(credentialRecord);
        return credentialRecord;
    }
    /**
     * Update the record to a new state and emit an state changed event. Also updates the record
     * in storage.
     *
     * @param credentialRecord The credential record to update the state for
     * @param newState The state to update to
     *
     */
    async updateState(credentialRecord, newState) {
        this.logger.debug(`Updating credential record ${credentialRecord.id} to state ${newState} (previous=${credentialRecord.state})`);
        const previousState = credentialRecord.state;
        credentialRecord.state = newState;
        await this.credentialRepository.update(credentialRecord);
        this.emitStateChangedEvent(credentialRecord, previousState);
    }
    emitStateChangedEvent(credentialRecord, previousState) {
        const clonedCredential = utils_1.JsonTransformer.clone(credentialRecord);
        this.eventEmitter.emit({
            type: CredentialEvents_1.CredentialEventTypes.CredentialStateChanged,
            payload: {
                credentialRecord: clonedCredential,
                previousState: previousState,
            },
        });
    }
    /**
     * Retrieve a credential record by id
     *
     * @param credentialRecordId The credential record id
     * @throws {RecordNotFoundError} If no record is found
     * @return The credential record
     *
     */
    getById(credentialRecordId) {
        return this.credentialRepository.getById(credentialRecordId);
    }
    /**
     * Retrieve all credential records
     *
     * @returns List containing all credential records
     */
    getAll() {
        return this.credentialRepository.getAll();
    }
    /**
     * Find a credential record by id
     *
     * @param credentialRecordId the credential record id
     * @returns The credential record or null if not found
     */
    findById(connectionId) {
        return this.credentialRepository.findById(connectionId);
    }
    async delete(credentialRecord, options) {
        var _a, _b;
        await this.credentialRepository.delete(credentialRecord);
        const deleteAssociatedCredentials = (_a = options === null || options === void 0 ? void 0 : options.deleteAssociatedCredentials) !== null && _a !== void 0 ? _a : true;
        const deleteAssociatedDidCommMessages = (_b = options === null || options === void 0 ? void 0 : options.deleteAssociatedDidCommMessages) !== null && _b !== void 0 ? _b : true;
        if (deleteAssociatedCredentials) {
            for (const credential of credentialRecord.credentials) {
                const formatService = this.getFormatServiceForRecordType(credential.credentialRecordType);
                await formatService.deleteCredentialById(credential.credentialRecordId);
            }
        }
        if (deleteAssociatedDidCommMessages) {
            const didCommMessages = await this.didCommMessageRepository.findByQuery({
                associatedRecordId: credentialRecord.id,
            });
            for (const didCommMessage of didCommMessages) {
                await this.didCommMessageRepository.delete(didCommMessage);
            }
        }
    }
    /**
     * Retrieve a credential record by connection id and thread id
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @throws {RecordNotFoundError} If no record is found
     * @throws {RecordDuplicateError} If multiple records are found
     * @returns The credential record
     */
    getByThreadAndConnectionId(threadId, connectionId) {
        return this.credentialRepository.getSingleByQuery({
            connectionId,
            threadId,
        });
    }
    /**
     * Find a credential record by connection id and thread id, returns null if not found
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @returns The credential record
     */
    findByThreadAndConnectionId(threadId, connectionId) {
        return this.credentialRepository.findSingleByQuery({
            connectionId,
            threadId,
        });
    }
    async update(credentialRecord) {
        return await this.credentialRepository.update(credentialRecord);
    }
}
exports.CredentialService = CredentialService;
//# sourceMappingURL=CredentialService.js.map