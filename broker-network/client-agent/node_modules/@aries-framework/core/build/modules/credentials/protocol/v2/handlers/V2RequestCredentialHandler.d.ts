import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { Handler } from '../../../../../agent/Handler';
import type { InboundMessageContext } from '../../../../../agent/models/InboundMessageContext';
import type { DidCommMessageRepository } from '../../../../../storage';
import type { V2CredentialService } from '../V2CredentialService';
import { V2RequestCredentialMessage } from '../messages/V2RequestCredentialMessage';
export declare class V2RequestCredentialHandler implements Handler {
    private credentialService;
    private agentConfig;
    private didCommMessageRepository;
    supportedMessages: (typeof V2RequestCredentialMessage)[];
    constructor(credentialService: V2CredentialService, agentConfig: AgentConfig, didCommMessageRepository: DidCommMessageRepository);
    handle(messageContext: InboundMessageContext<V2RequestCredentialMessage>): Promise<import("../../../../../types").OutboundMessage<import("..").V2IssueCredentialMessage> | import("../../../../../types").OutboundServiceMessage<import("..").V2IssueCredentialMessage> | undefined>;
    private acceptRequest;
}
