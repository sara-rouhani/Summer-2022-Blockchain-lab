import type { Routing } from '../../connections';
import { AgentConfig } from '../../../agent/AgentConfig';
import { EventEmitter } from '../../../agent/EventEmitter';
import { Wallet } from '../../../wallet';
import { MediationRecipientService } from './MediationRecipientService';
export declare class RoutingService {
    private mediationRecipientService;
    private agentConfig;
    private wallet;
    private eventEmitter;
    constructor(mediationRecipientService: MediationRecipientService, agentConfig: AgentConfig, wallet: Wallet, eventEmitter: EventEmitter);
    getRouting({ mediatorId, useDefaultMediator }?: GetRoutingOptions): Promise<Routing>;
}
export interface GetRoutingOptions {
    /**
     * Identifier of the mediator to use when setting up routing
     */
    mediatorId?: string;
    /**
     * Whether to use the default mediator if available and `mediatorId` has not been provided
     * @default true
     */
    useDefaultMediator?: boolean;
}
