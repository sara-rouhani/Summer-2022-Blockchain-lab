"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MediatorModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediatorModule = void 0;
const AgentConfig_1 = require("../../agent/AgentConfig");
const Dispatcher_1 = require("../../agent/Dispatcher");
const EventEmitter_1 = require("../../agent/EventEmitter");
const MessageReceiver_1 = require("../../agent/MessageReceiver");
const MessageSender_1 = require("../../agent/MessageSender");
const helpers_1 = require("../../agent/helpers");
const plugins_1 = require("../../plugins");
const services_1 = require("../connections/services");
const handlers_1 = require("./handlers");
const MediationRequestHandler_1 = require("./handlers/MediationRequestHandler");
const MediatorService_1 = require("./services/MediatorService");
const MessagePickupService_1 = require("./services/MessagePickupService");
let MediatorModule = MediatorModule_1 = class MediatorModule {
    constructor(dispatcher, mediationService, messagePickupService, messageSender, messageReceiver, eventEmitter, agentConfig, connectionService) {
        this.mediatorService = mediationService;
        this.messagePickupService = messagePickupService;
        this.messageSender = messageSender;
        this.eventEmitter = eventEmitter;
        this.agentConfig = agentConfig;
        this.connectionService = connectionService;
        this.registerHandlers(dispatcher);
    }
    async grantRequestedMediation(mediatorId) {
        const record = await this.mediatorService.getById(mediatorId);
        const connectionRecord = await this.connectionService.getById(record.connectionId);
        const { message, mediationRecord } = await this.mediatorService.createGrantMediationMessage(record);
        const outboundMessage = helpers_1.createOutboundMessage(connectionRecord, message);
        await this.messageSender.sendMessage(outboundMessage);
        return mediationRecord;
    }
    queueMessage(connectionId, message) {
        return this.messagePickupService.queueMessage(connectionId, message);
    }
    registerHandlers(dispatcher) {
        dispatcher.registerHandler(new handlers_1.KeylistUpdateHandler(this.mediatorService));
        dispatcher.registerHandler(new handlers_1.ForwardHandler(this.mediatorService, this.connectionService, this.messageSender));
        dispatcher.registerHandler(new handlers_1.BatchPickupHandler(this.messagePickupService));
        dispatcher.registerHandler(new handlers_1.BatchHandler(this.eventEmitter));
        dispatcher.registerHandler(new MediationRequestHandler_1.MediationRequestHandler(this.mediatorService, this.agentConfig));
    }
    /**
     * Registers the dependencies of the mediator module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(MediatorModule_1);
        // Services
        dependencyManager.registerSingleton(MediatorService_1.MediatorService);
        dependencyManager.registerSingleton(MessagePickupService_1.MessagePickupService);
    }
};
MediatorModule = MediatorModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __metadata("design:paramtypes", [Dispatcher_1.Dispatcher,
        MediatorService_1.MediatorService,
        MessagePickupService_1.MessagePickupService,
        MessageSender_1.MessageSender,
        MessageReceiver_1.MessageReceiver,
        EventEmitter_1.EventEmitter,
        AgentConfig_1.AgentConfig,
        services_1.ConnectionService])
], MediatorModule);
exports.MediatorModule = MediatorModule;
//# sourceMappingURL=MediatorModule.js.map