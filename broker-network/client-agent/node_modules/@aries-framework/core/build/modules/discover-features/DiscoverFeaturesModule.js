"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DiscoverFeaturesModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoverFeaturesModule = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const AgentConfig_1 = require("../../agent/AgentConfig");
const Dispatcher_1 = require("../../agent/Dispatcher");
const EventEmitter_1 = require("../../agent/EventEmitter");
const Events_1 = require("../../agent/Events");
const MessageSender_1 = require("../../agent/MessageSender");
const helpers_1 = require("../../agent/helpers");
const plugins_1 = require("../../plugins");
const messageType_1 = require("../../utils/messageType");
const services_1 = require("../connections/services");
const handlers_1 = require("./handlers");
const messages_1 = require("./messages");
const services_2 = require("./services");
let DiscoverFeaturesModule = DiscoverFeaturesModule_1 = class DiscoverFeaturesModule {
    constructor(dispatcher, connectionService, messageSender, discoverFeaturesService, eventEmitter, agentConfig) {
        this.connectionService = connectionService;
        this.messageSender = messageSender;
        this.discoverFeaturesService = discoverFeaturesService;
        this.registerHandlers(dispatcher);
        this.eventEmitter = eventEmitter;
        this.agentConfig = agentConfig;
    }
    async isProtocolSupported(connectionId, message) {
        const { protocolUri } = message.type;
        // Listen for response to our feature query
        const replaySubject = new rxjs_1.ReplaySubject(1);
        this.eventEmitter
            .observable(Events_1.AgentEventTypes.AgentMessageProcessed)
            .pipe(
        // Stop when the agent shuts down
        operators_1.takeUntil(this.agentConfig.stop$), 
        // filter by connection id and query disclose message type
        operators_1.filter((e) => {
            var _a;
            return ((_a = e.payload.connection) === null || _a === void 0 ? void 0 : _a.id) === connectionId &&
                messageType_1.canHandleMessageType(messages_1.DiscloseMessage, messageType_1.parseMessageType(e.payload.message.type));
        }), 
        // Return whether the protocol is supported
        operators_1.map((e) => {
            const message = e.payload.message;
            return message.protocols.map((p) => p.protocolId).includes(protocolUri);
        }), 
        // TODO: make configurable
        // If we don't have an answer in 7 seconds (no response, not supported, etc...) error
        operators_1.timeout(7000), 
        // We want to return false if an error occurred
        operators_1.catchError(() => rxjs_1.of(false)))
            .subscribe(replaySubject);
        await this.queryFeatures(connectionId, {
            query: protocolUri,
            comment: 'Detect if protocol is supported',
        });
        const isProtocolSupported = await rxjs_1.firstValueFrom(replaySubject);
        return isProtocolSupported;
    }
    async queryFeatures(connectionId, options) {
        const connection = await this.connectionService.getById(connectionId);
        const queryMessage = await this.discoverFeaturesService.createQuery(options);
        const outbound = helpers_1.createOutboundMessage(connection, queryMessage);
        await this.messageSender.sendMessage(outbound);
    }
    registerHandlers(dispatcher) {
        dispatcher.registerHandler(new handlers_1.DiscloseMessageHandler());
        dispatcher.registerHandler(new handlers_1.QueryMessageHandler(this.discoverFeaturesService));
    }
    /**
     * Registers the dependencies of the discover features module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(DiscoverFeaturesModule_1);
        // Services
        dependencyManager.registerSingleton(services_2.DiscoverFeaturesService);
    }
};
DiscoverFeaturesModule = DiscoverFeaturesModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __metadata("design:paramtypes", [Dispatcher_1.Dispatcher,
        services_1.ConnectionService,
        MessageSender_1.MessageSender,
        services_2.DiscoverFeaturesService,
        EventEmitter_1.EventEmitter,
        AgentConfig_1.AgentConfig])
], DiscoverFeaturesModule);
exports.DiscoverFeaturesModule = DiscoverFeaturesModule;
//# sourceMappingURL=DiscoverFeaturesModule.js.map