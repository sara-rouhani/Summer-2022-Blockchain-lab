import type { DependencyManager } from '../../plugins';
import type { ParsedMessageType } from '../../utils/messageType';
import { AgentConfig } from '../../agent/AgentConfig';
import { Dispatcher } from '../../agent/Dispatcher';
import { EventEmitter } from '../../agent/EventEmitter';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections/services';
import { DiscoverFeaturesService } from './services';
export declare class DiscoverFeaturesModule {
    private connectionService;
    private messageSender;
    private discoverFeaturesService;
    private eventEmitter;
    private agentConfig;
    constructor(dispatcher: Dispatcher, connectionService: ConnectionService, messageSender: MessageSender, discoverFeaturesService: DiscoverFeaturesService, eventEmitter: EventEmitter, agentConfig: AgentConfig);
    isProtocolSupported(connectionId: string, message: {
        type: ParsedMessageType;
    }): Promise<unknown>;
    queryFeatures(connectionId: string, options: {
        query: string;
        comment?: string;
    }): Promise<void>;
    private registerHandlers;
    /**
     * Registers the dependencies of the discover features module on the dependency manager.
     */
    static register(dependencyManager: DependencyManager): void;
}
