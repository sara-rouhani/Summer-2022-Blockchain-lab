"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GenericRecordsModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericRecordsModule = void 0;
const AgentConfig_1 = require("../../agent/AgentConfig");
const plugins_1 = require("../../plugins");
const GenericRecordsRepository_1 = require("./repository/GenericRecordsRepository");
const GenericRecordService_1 = require("./service/GenericRecordService");
let GenericRecordsModule = GenericRecordsModule_1 = class GenericRecordsModule {
    constructor(agentConfig, genericRecordsService) {
        this.genericRecordsService = genericRecordsService;
        this.logger = agentConfig.logger;
    }
    async save({ content, tags }) {
        try {
            const record = await this.genericRecordsService.save({
                content: content,
                tags: tags,
            });
            return record;
        }
        catch (error) {
            this.logger.error('Error while saving generic-record', {
                error,
                content,
                errorMessage: error instanceof Error ? error.message : error,
            });
            throw error;
        }
    }
    async delete(record) {
        try {
            await this.genericRecordsService.delete(record);
        }
        catch (error) {
            this.logger.error('Error while saving generic-record', {
                error,
                content: record.content,
                errorMessage: error instanceof Error ? error.message : error,
            });
            throw error;
        }
    }
    async update(record) {
        try {
            await this.genericRecordsService.update(record);
        }
        catch (error) {
            this.logger.error('Error while update generic-record', {
                error,
                content: record.content,
                errorMessage: error instanceof Error ? error.message : error,
            });
            throw error;
        }
    }
    async findById(id) {
        return this.genericRecordsService.findById(id);
    }
    async findAllByQuery(query) {
        return this.genericRecordsService.findAllByQuery(query);
    }
    async getAll() {
        return this.genericRecordsService.getAll();
    }
    /**
     * Registers the dependencies of the generic records module on the dependency manager.
     */
    static register(dependencyManager) {
        // Api
        dependencyManager.registerContextScoped(GenericRecordsModule_1);
        // Services
        dependencyManager.registerSingleton(GenericRecordService_1.GenericRecordService);
        // Repositories
        dependencyManager.registerSingleton(GenericRecordsRepository_1.GenericRecordsRepository);
    }
};
GenericRecordsModule = GenericRecordsModule_1 = __decorate([
    plugins_1.module(),
    plugins_1.injectable(),
    __metadata("design:paramtypes", [AgentConfig_1.AgentConfig, GenericRecordService_1.GenericRecordService])
], GenericRecordsModule);
exports.GenericRecordsModule = GenericRecordsModule;
//# sourceMappingURL=GenericRecordsModule.js.map