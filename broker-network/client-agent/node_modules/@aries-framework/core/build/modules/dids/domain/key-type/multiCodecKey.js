"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMultiCodecPrefixByKeytype = exports.getKeyTypeByMultiCodecPrefix = void 0;
const crypto_1 = require("../../../../crypto");
// based on https://github.com/multiformats/multicodec/blob/master/table.csv
const multiCodecPrefixMap = {
    234: crypto_1.KeyType.Bls12381g1,
    235: crypto_1.KeyType.Bls12381g2,
    236: crypto_1.KeyType.X25519,
    237: crypto_1.KeyType.Ed25519,
    238: crypto_1.KeyType.Bls12381g1g2,
};
function getKeyTypeByMultiCodecPrefix(multiCodecPrefix) {
    const keyType = multiCodecPrefixMap[multiCodecPrefix];
    if (!keyType) {
        throw new Error(`Unsupported key type from multicodec code '${multiCodecPrefix}'`);
    }
    return keyType;
}
exports.getKeyTypeByMultiCodecPrefix = getKeyTypeByMultiCodecPrefix;
function getMultiCodecPrefixByKeytype(keyType) {
    const codes = Object.keys(multiCodecPrefixMap);
    const code = codes.find((key) => multiCodecPrefixMap[key] === keyType);
    if (!code) {
        throw new Error(`Could not find multicodec prefix for key type '${keyType}'`);
    }
    return Number(code);
}
exports.getMultiCodecPrefixByKeytype = getMultiCodecPrefixByKeytype;
//# sourceMappingURL=multiCodecKey.js.map