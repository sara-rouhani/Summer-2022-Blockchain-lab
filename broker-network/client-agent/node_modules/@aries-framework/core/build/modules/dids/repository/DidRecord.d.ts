import type { TagsBase } from '../../../storage/BaseRecord';
import type { DidRecordMetadata } from './didRecordMetadataTypes';
import { BaseRecord } from '../../../storage/BaseRecord';
import { DidDocument } from '../domain';
import { DidDocumentRole } from '../domain/DidDocumentRole';
export interface DidRecordProps {
    id: string;
    role: DidDocumentRole;
    didDocument?: DidDocument;
    createdAt?: Date;
    tags?: CustomDidTags;
}
interface CustomDidTags extends TagsBase {
    recipientKeyFingerprints?: string[];
}
declare type DefaultDidTags = {
    role: DidDocumentRole;
    method: string;
    legacyUnqualifiedDid?: string;
};
export declare class DidRecord extends BaseRecord<DefaultDidTags, CustomDidTags, DidRecordMetadata> implements DidRecordProps {
    didDocument?: DidDocument;
    role: DidDocumentRole;
    static readonly type = "DidRecord";
    readonly type = "DidRecord";
    constructor(props: DidRecordProps);
    getTags(): {
        role: DidDocumentRole;
        method: string;
        legacyUnqualifiedDid: string | undefined;
        recipientKeyFingerprints?: string[] | undefined;
    };
}
export {};
