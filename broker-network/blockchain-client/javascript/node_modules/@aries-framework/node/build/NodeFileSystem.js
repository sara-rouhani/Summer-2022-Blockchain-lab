"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileSystem = void 0;
const fs_1 = __importStar(require("fs"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const os_1 = require("os");
const path_1 = require("path");
const { access, readFile, writeFile } = fs_1.promises;
class NodeFileSystem {
    /**
     * Create new NodeFileSystem class instance.
     *
     * @param basePath The base path to use for reading and writing files. process.cwd() if not specified
     */
    constructor(basePath) {
        this.basePath = basePath !== null && basePath !== void 0 ? basePath : os_1.tmpdir();
    }
    async exists(path) {
        try {
            await access(path);
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async write(path, data) {
        // Make sure parent directories exist
        await fs_1.promises.mkdir(path_1.dirname(path), { recursive: true });
        return writeFile(path, data, { encoding: 'utf-8' });
    }
    async read(path) {
        return readFile(path, { encoding: 'utf-8' });
    }
    async downloadToFile(url, path) {
        const httpMethod = url.startsWith('https') ? https_1.default : http_1.default;
        // Make sure parent directories exist
        await fs_1.promises.mkdir(path_1.dirname(path), { recursive: true });
        const file = fs_1.default.createWriteStream(path);
        return new Promise((resolve, reject) => {
            httpMethod
                .get(url, (response) => {
                // check if response is success
                if (response.statusCode !== 200) {
                    reject(`Unable to download file from url: ${url}. Response status was ${response.statusCode}`);
                }
                response.pipe(file);
                file.on('finish', () => {
                    file.close();
                    resolve();
                });
            })
                .on('error', async (error) => {
                // Handle errors
                await fs_1.default.promises.unlink(path); // Delete the file async. (But we don't check the result)
                reject(`Unable to download file from url: ${url}. ${error.message}`);
            });
        });
    }
}
exports.NodeFileSystem = NodeFileSystem;
//# sourceMappingURL=NodeFileSystem.js.map