import type { default as Indy, CredDef, NymRole, Schema } from 'indy-sdk';
import { AgentConfig } from '../../../agent/AgentConfig';
import { IndyWallet } from '../../../wallet/IndyWallet';
import { IndyIssuerService } from '../../indy/services/IndyIssuerService';
import { IndyPoolService } from './IndyPoolService';
export declare class IndyLedgerService {
    private wallet;
    private indy;
    private logger;
    private indyIssuer;
    private indyPoolService;
    constructor(wallet: IndyWallet, agentConfig: AgentConfig, indyIssuer: IndyIssuerService, indyPoolService: IndyPoolService);
    connectToPools(): Promise<number[]>;
    registerPublicDid(submitterDid: string, targetDid: string, verkey: string, alias: string, role?: NymRole): Promise<string>;
    getPublicDid(did: string): Promise<Indy.GetNymResponse>;
    getEndpointsForDid(did: string): Promise<IndyEndpointAttrib>;
    registerSchema(did: string, schemaTemplate: SchemaTemplate): Promise<Schema>;
    getSchema(schemaId: string): Promise<Indy.Schema>;
    registerCredentialDefinition(did: string, credentialDefinitionTemplate: CredentialDefinitionTemplate): Promise<CredDef>;
    getCredentialDefinition(credentialDefinitionId: string): Promise<Indy.CredDef>;
    getRevocationRegistryDefinition(revocationRegistryDefinitionId: string): Promise<ParseRevocationRegistryDefinitionTemplate>;
    getRevocationRegistryDelta(revocationRegistryDefinitionId: string, to?: number, from?: number): Promise<ParseRevocationRegistryDeltaTemplate>;
    getRevocationRegistry(revocationRegistryDefinitionId: string, timestamp: number): Promise<ParseRevocationRegistryTemplate>;
    private submitWriteRequest;
    private submitReadRequest;
    private signRequest;
    private appendTaa;
    private getTransactionAuthorAgreement;
}
export interface SchemaTemplate {
    name: string;
    version: string;
    attributes: string[];
}
export interface CredentialDefinitionTemplate {
    schema: Schema;
    tag: string;
    signatureType: 'CL';
    supportRevocation: boolean;
}
export interface ParseRevocationRegistryDefinitionTemplate {
    revocationRegistryDefinition: Indy.RevocRegDef;
    revocationRegistryDefinitionTxnTime: number;
}
export interface ParseRevocationRegistryDeltaTemplate {
    revocationRegistryDelta: Indy.RevocRegDelta;
    deltaTimestamp: number;
}
export interface ParseRevocationRegistryTemplate {
    revocationRegistry: Indy.RevocReg;
    ledgerTimestamp: number;
}
export interface IndyEndpointAttrib {
    endpoint?: string;
    types?: Array<'endpoint' | 'did-communication' | 'DIDComm'>;
    routingKeys?: string[];
    [key: string]: unknown;
}
