import type { AgentConfig } from '../../../agent/AgentConfig';
import type { AgentMessage } from '../../../agent/AgentMessage';
import type { Dispatcher } from '../../../agent/Dispatcher';
import type { EventEmitter } from '../../../agent/EventEmitter';
import type { InboundMessageContext } from '../../../agent/models/InboundMessageContext';
import type { Logger } from '../../../logger';
import type { DidCommMessageRepository } from '../../../storage';
import type { ProblemReportMessage } from '../../problem-reports';
import type { CreateProposalOptions, CredentialProtocolMsgReturnType, DeleteCredentialOptions, AcceptProposalOptions, NegotiateProposalOptions, CreateOfferOptions, NegotiateOfferOptions, CreateRequestOptions, AcceptOfferOptions, AcceptRequestOptions, AcceptCredentialOptions, GetFormatDataReturn } from '../CredentialServiceOptions';
import type { CredentialFormat, CredentialFormatService } from '../formats';
import type { CredentialExchangeRecord, CredentialRepository } from './../repository';
import { CredentialState } from '../models/CredentialState';
export declare abstract class CredentialService<CFs extends CredentialFormat[] = CredentialFormat[]> {
    protected credentialRepository: CredentialRepository;
    protected didCommMessageRepository: DidCommMessageRepository;
    protected eventEmitter: EventEmitter;
    protected dispatcher: Dispatcher;
    protected agentConfig: AgentConfig;
    protected logger: Logger;
    constructor(credentialRepository: CredentialRepository, didCommMessageRepository: DidCommMessageRepository, eventEmitter: EventEmitter, dispatcher: Dispatcher, agentConfig: AgentConfig);
    abstract readonly version: string;
    abstract getFormatServiceForRecordType(credentialRecordType: CFs[number]['credentialRecordType']): CredentialFormatService<CFs[number]>;
    abstract createProposal(options: CreateProposalOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract processProposal(messageContext: InboundMessageContext<AgentMessage>): Promise<CredentialExchangeRecord>;
    abstract acceptProposal(options: AcceptProposalOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract negotiateProposal(options: NegotiateProposalOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract createOffer(options: CreateOfferOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract processOffer(messageContext: InboundMessageContext<AgentMessage>): Promise<CredentialExchangeRecord>;
    abstract acceptOffer(options: AcceptOfferOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract negotiateOffer(options: NegotiateOfferOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract createRequest(options: CreateRequestOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract processRequest(messageContext: InboundMessageContext<AgentMessage>): Promise<CredentialExchangeRecord>;
    abstract acceptRequest(options: AcceptRequestOptions<CFs>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract processCredential(messageContext: InboundMessageContext<AgentMessage>): Promise<CredentialExchangeRecord>;
    abstract acceptCredential(options: AcceptCredentialOptions): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    abstract processAck(messageContext: InboundMessageContext<AgentMessage>): Promise<CredentialExchangeRecord>;
    abstract findProposalMessage(credentialExchangeId: string): Promise<AgentMessage | null>;
    abstract findOfferMessage(credentialExchangeId: string): Promise<AgentMessage | null>;
    abstract findRequestMessage(credentialExchangeId: string): Promise<AgentMessage | null>;
    abstract findCredentialMessage(credentialExchangeId: string): Promise<AgentMessage | null>;
    abstract getFormatData(credentialExchangeId: string): Promise<GetFormatDataReturn<CFs>>;
    /**
     * Decline a credential offer
     * @param credentialRecord The credential to be declined
     */
    declineOffer(credentialRecord: CredentialExchangeRecord): Promise<CredentialExchangeRecord>;
    /**
     * Process a received credential {@link ProblemReportMessage}.
     *
     * @param messageContext The message context containing a credential problem report message
     * @returns credential record associated with the credential problem report message
     */
    processProblemReport(messageContext: InboundMessageContext<ProblemReportMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Update the record to a new state and emit an state changed event. Also updates the record
     * in storage.
     *
     * @param credentialRecord The credential record to update the state for
     * @param newState The state to update to
     *
     */
    updateState(credentialRecord: CredentialExchangeRecord, newState: CredentialState): Promise<void>;
    protected emitStateChangedEvent(credentialRecord: CredentialExchangeRecord, previousState: CredentialState | null): void;
    /**
     * Retrieve a credential record by id
     *
     * @param credentialRecordId The credential record id
     * @throws {RecordNotFoundError} If no record is found
     * @return The credential record
     *
     */
    getById(credentialRecordId: string): Promise<CredentialExchangeRecord>;
    /**
     * Retrieve all credential records
     *
     * @returns List containing all credential records
     */
    getAll(): Promise<CredentialExchangeRecord[]>;
    /**
     * Find a credential record by id
     *
     * @param credentialRecordId the credential record id
     * @returns The credential record or null if not found
     */
    findById(connectionId: string): Promise<CredentialExchangeRecord | null>;
    delete(credentialRecord: CredentialExchangeRecord, options?: DeleteCredentialOptions): Promise<void>;
    /**
     * Retrieve a credential record by connection id and thread id
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @throws {RecordNotFoundError} If no record is found
     * @throws {RecordDuplicateError} If multiple records are found
     * @returns The credential record
     */
    getByThreadAndConnectionId(threadId: string, connectionId?: string): Promise<CredentialExchangeRecord>;
    /**
     * Find a credential record by connection id and thread id, returns null if not found
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @returns The credential record
     */
    findByThreadAndConnectionId(threadId: string, connectionId?: string): Promise<CredentialExchangeRecord | null>;
    update(credentialRecord: CredentialExchangeRecord): Promise<void>;
}
