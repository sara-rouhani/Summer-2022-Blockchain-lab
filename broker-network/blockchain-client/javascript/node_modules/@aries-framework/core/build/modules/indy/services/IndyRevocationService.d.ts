import type { IndyRevocationInterval } from '../../credentials';
import type { RequestedCredentials } from '../../proofs';
import type { default as Indy } from 'indy-sdk';
import { AgentConfig } from '../../../agent/AgentConfig';
import { IndyWallet } from '../../../wallet/IndyWallet';
import { IndyLedgerService } from '../../ledger';
import { IndyUtilitiesService } from './IndyUtilitiesService';
export declare class IndyRevocationService {
    private indy;
    private indyUtilitiesService;
    private fileSystem;
    private ledgerService;
    private logger;
    private wallet;
    constructor(agentConfig: AgentConfig, indyUtilitiesService: IndyUtilitiesService, ledgerService: IndyLedgerService, wallet: IndyWallet);
    createRevocationState(proofRequest: Indy.IndyProofRequest, requestedCredentials: RequestedCredentials): Promise<Indy.RevStates>;
    getRevocationStatus(credentialRevocationId: string, revocationRegistryDefinitionId: string, requestRevocationInterval: IndyRevocationInterval): Promise<{
        revoked: boolean;
        deltaTimestamp: number;
    }>;
    private assertRevocationInterval;
}
