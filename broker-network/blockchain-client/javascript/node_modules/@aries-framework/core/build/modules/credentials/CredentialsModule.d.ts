import type { AgentMessage } from '../../agent/AgentMessage';
import type { DeleteCredentialOptions } from './CredentialServiceOptions';
import type { AcceptCredentialOptions, AcceptOfferOptions, AcceptProposalOptions, AcceptRequestOptions, NegotiateOfferOptions, NegotiateProposalOptions, OfferCredentialOptions, ProposeCredentialOptions, CreateOfferOptions, FindOfferMessageReturn, FindRequestMessageReturn, FindCredentialMessageReturn, FindProposalMessageReturn, GetFormatDataReturn } from './CredentialsModuleOptions';
import type { CredentialFormat } from './formats';
import type { IndyCredentialFormat } from './formats/indy/IndyCredentialFormat';
import type { CredentialExchangeRecord } from './repository/CredentialExchangeRecord';
import type { CredentialService } from './services/CredentialService';
import { AgentConfig } from '../../agent/AgentConfig';
import { MessageSender } from '../../agent/MessageSender';
import { DidCommMessageRepository } from '../../storage/didcomm/DidCommMessageRepository';
import { ConnectionService } from '../connections/services';
import { MediationRecipientService } from '../routing';
import { V1CredentialService } from './protocol/v1/V1CredentialService';
import { V2CredentialService } from './protocol/v2/V2CredentialService';
import { CredentialRepository } from './repository/CredentialRepository';
import { RevocationNotificationService } from './services';
export interface CredentialsModule<CFs extends CredentialFormat[], CSs extends CredentialService<CFs>[]> {
    proposeCredential(options: ProposeCredentialOptions<CFs, CSs>): Promise<CredentialExchangeRecord>;
    acceptProposal(options: AcceptProposalOptions<CFs>): Promise<CredentialExchangeRecord>;
    negotiateProposal(options: NegotiateProposalOptions<CFs>): Promise<CredentialExchangeRecord>;
    offerCredential(options: OfferCredentialOptions<CFs, CSs>): Promise<CredentialExchangeRecord>;
    acceptOffer(options: AcceptOfferOptions<CFs>): Promise<CredentialExchangeRecord>;
    declineOffer(credentialRecordId: string): Promise<CredentialExchangeRecord>;
    negotiateOffer(options: NegotiateOfferOptions<CFs>): Promise<CredentialExchangeRecord>;
    createOffer(options: CreateOfferOptions<CFs, CSs>): Promise<{
        message: AgentMessage;
        credentialRecord: CredentialExchangeRecord;
    }>;
    acceptRequest(options: AcceptRequestOptions<CFs>): Promise<CredentialExchangeRecord>;
    acceptCredential(options: AcceptCredentialOptions): Promise<CredentialExchangeRecord>;
    getAll(): Promise<CredentialExchangeRecord[]>;
    getById(credentialRecordId: string): Promise<CredentialExchangeRecord>;
    findById(credentialRecordId: string): Promise<CredentialExchangeRecord | null>;
    deleteById(credentialRecordId: string, options?: DeleteCredentialOptions): Promise<void>;
    getFormatData(credentialRecordId: string): Promise<GetFormatDataReturn<CFs>>;
    findProposalMessage(credentialExchangeId: string): Promise<FindProposalMessageReturn<CSs>>;
    findOfferMessage(credentialExchangeId: string): Promise<FindOfferMessageReturn<CSs>>;
    findRequestMessage(credentialExchangeId: string): Promise<FindRequestMessageReturn<CSs>>;
    findCredentialMessage(credentialExchangeId: string): Promise<FindCredentialMessageReturn<CSs>>;
}
export declare class CredentialsModule<CFs extends CredentialFormat[] = [IndyCredentialFormat], CSs extends CredentialService<CFs>[] = [V1CredentialService, V2CredentialService<CFs>]> implements CredentialsModule<CFs, CSs> {
    private connectionService;
    private messageSender;
    private credentialRepository;
    private agentConfig;
    private didCommMessageRepo;
    private mediatorRecipientService;
    private logger;
    private serviceMap;
    constructor(messageSender: MessageSender, connectionService: ConnectionService, agentConfig: AgentConfig, credentialRepository: CredentialRepository, mediationRecipientService: MediationRecipientService, didCommMessageRepository: DidCommMessageRepository, v1Service: V1CredentialService, v2Service: V2CredentialService<CFs>, _revocationNotificationService: RevocationNotificationService);
    getService<PVT extends CredentialService['version']>(protocolVersion: PVT): CredentialService<CFs>;
    private getServiceForCredentialExchangeId;
}
