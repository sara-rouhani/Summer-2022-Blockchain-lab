import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../../../agent/Handler';
import type { DidCommMessageRepository } from '../../../../../storage';
import type { V1CredentialService } from '../V1CredentialService';
import { V1RequestCredentialMessage } from '../messages';
export declare class V1RequestCredentialHandler implements Handler {
    private agentConfig;
    private credentialService;
    private didCommMessageRepository;
    supportedMessages: (typeof V1RequestCredentialMessage)[];
    constructor(credentialService: V1CredentialService, agentConfig: AgentConfig, didCommMessageRepository: DidCommMessageRepository);
    handle(messageContext: HandlerInboundMessage<V1RequestCredentialHandler>): Promise<import("../../../../../types").OutboundMessage<import("../messages").V1IssueCredentialMessage> | import("../../../../../types").OutboundServiceMessage<import("../messages").V1IssueCredentialMessage> | undefined>;
    private acceptRequest;
}
