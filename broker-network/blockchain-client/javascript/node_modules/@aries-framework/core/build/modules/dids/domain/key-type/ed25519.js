"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPublicKeyToX25519 = exports.keyDidEd25519 = exports.getEd25519VerificationMethod = void 0;
const ed25519_1 = require("@stablelib/ed25519");
Object.defineProperty(exports, "convertPublicKeyToX25519", { enumerable: true, get: function () { return ed25519_1.convertPublicKeyToX25519; } });
const crypto_1 = require("../../../../crypto");
const Key_1 = require("../Key");
const VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018 = 'Ed25519VerificationKey2018';
function getEd25519VerificationMethod({ key, id, controller }) {
    return {
        id,
        type: VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018,
        controller,
        publicKeyBase58: key.publicKeyBase58,
    };
}
exports.getEd25519VerificationMethod = getEd25519VerificationMethod;
exports.keyDidEd25519 = {
    supportedVerificationMethodTypes: [VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018],
    getVerificationMethods: (did, key) => [
        getEd25519VerificationMethod({ id: `${did}#${key.fingerprint}`, key, controller: did }),
    ],
    getKeyFromVerificationMethod: (verificationMethod) => {
        if (verificationMethod.type !== VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018 ||
            !verificationMethod.publicKeyBase58) {
            throw new Error('Invalid verification method passed');
        }
        return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.Ed25519);
    },
};
//# sourceMappingURL=ed25519.js.map