import type { AgentConfig } from '../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../agent/Handler';
import type { DidResolverService } from '../../dids';
import type { OutOfBandService } from '../../oob/OutOfBandService';
import type { DidExchangeProtocol } from '../DidExchangeProtocol';
import type { ConnectionService } from '../services';
import { DidExchangeResponseMessage } from '../messages';
export declare class DidExchangeResponseHandler implements Handler {
    private agentConfig;
    private didExchangeProtocol;
    private outOfBandService;
    private connectionService;
    private didResolverService;
    supportedMessages: (typeof DidExchangeResponseMessage)[];
    constructor(agentConfig: AgentConfig, didExchangeProtocol: DidExchangeProtocol, outOfBandService: OutOfBandService, connectionService: ConnectionService, didResolverService: DidResolverService);
    handle(messageContext: HandlerInboundMessage<DidExchangeResponseHandler>): Promise<import("../../../types").OutboundMessage<import("../messages").DidExchangeCompleteMessage> | undefined>;
}
