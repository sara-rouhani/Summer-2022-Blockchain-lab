import type { InboundMessageContext } from '../../agent/models/InboundMessageContext';
import type { ConnectionRecord } from '../connections';
import type { Key } from '../dids/domain/Key';
import type { OutOfBandRecord } from './repository';
import { EventEmitter } from '../../agent/EventEmitter';
import { OutOfBandState } from './domain/OutOfBandState';
import { HandshakeReuseMessage } from './messages';
import { HandshakeReuseAcceptedMessage } from './messages/HandshakeReuseAcceptedMessage';
import { OutOfBandRepository } from './repository';
export declare class OutOfBandService {
    private outOfBandRepository;
    private eventEmitter;
    constructor(outOfBandRepository: OutOfBandRepository, eventEmitter: EventEmitter);
    processHandshakeReuse(messageContext: InboundMessageContext<HandshakeReuseMessage>): Promise<HandshakeReuseAcceptedMessage>;
    processHandshakeReuseAccepted(messageContext: InboundMessageContext<HandshakeReuseAcceptedMessage>): Promise<void>;
    createHandShakeReuse(outOfBandRecord: OutOfBandRecord, connectionRecord: ConnectionRecord): Promise<HandshakeReuseMessage>;
    save(outOfBandRecord: OutOfBandRecord): Promise<void>;
    updateState(outOfBandRecord: OutOfBandRecord, newState: OutOfBandState): Promise<void>;
    emitStateChangedEvent(outOfBandRecord: OutOfBandRecord, previousState: OutOfBandState | null): void;
    findById(outOfBandRecordId: string): Promise<OutOfBandRecord | null>;
    getById(outOfBandRecordId: string): Promise<OutOfBandRecord>;
    findByInvitationId(invitationId: string): Promise<OutOfBandRecord | null>;
    findByRecipientKey(recipientKey: Key): Promise<OutOfBandRecord | null>;
    getAll(): Promise<OutOfBandRecord[]>;
    deleteById(outOfBandId: string): Promise<void>;
}
