"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDidDocumentForKey = void 0;
const crypto_1 = require("../../../crypto");
const DidDocumentBuilder_1 = require("./DidDocumentBuilder");
const Key_1 = require("./Key");
const bls12381g1_1 = require("./key-type/bls12381g1");
const bls12381g1g2_1 = require("./key-type/bls12381g1g2");
const bls12381g2_1 = require("./key-type/bls12381g2");
const ed25519_1 = require("./key-type/ed25519");
const x25519_1 = require("./key-type/x25519");
const didDocumentKeyTypeMapping = {
    [crypto_1.KeyType.Ed25519]: getEd25519DidDoc,
    [crypto_1.KeyType.X25519]: getX25519DidDoc,
    [crypto_1.KeyType.Bls12381g1]: getBls12381g1DidDoc,
    [crypto_1.KeyType.Bls12381g2]: getBls12381g2DidDoc,
    [crypto_1.KeyType.Bls12381g1g2]: getBls12381g1g2DidDoc,
};
function getDidDocumentForKey(did, key) {
    const getDidDocument = didDocumentKeyTypeMapping[key.keyType];
    return getDidDocument(did, key);
}
exports.getDidDocumentForKey = getDidDocumentForKey;
function getBls12381g1DidDoc(did, key) {
    const verificationMethod = bls12381g1_1.getBls12381g1VerificationMethod(did, key);
    return getSignatureKeyBase({
        did,
        key,
        verificationMethod,
    })
        .addContext('https://w3id.org/security/bbs/v1')
        .build();
}
function getBls12381g1g2DidDoc(did, key) {
    const verificationMethods = bls12381g1g2_1.getBls12381g1g2VerificationMethod(did, key);
    const didDocumentBuilder = new DidDocumentBuilder_1.DidDocumentBuilder(did);
    for (const verificationMethod of verificationMethods) {
        didDocumentBuilder
            .addVerificationMethod(verificationMethod)
            .addAuthentication(verificationMethod.id)
            .addAssertionMethod(verificationMethod.id)
            .addCapabilityDelegation(verificationMethod.id)
            .addCapabilityInvocation(verificationMethod.id);
    }
    return didDocumentBuilder.addContext('https://w3id.org/security/bbs/v1').build();
}
function getEd25519DidDoc(did, key) {
    const verificationMethod = ed25519_1.getEd25519VerificationMethod({ id: `${did}#${key.fingerprint}`, key, controller: did });
    const publicKeyX25519 = ed25519_1.convertPublicKeyToX25519(key.publicKey);
    const didKeyX25519 = Key_1.Key.fromPublicKey(publicKeyX25519, crypto_1.KeyType.X25519);
    const x25519VerificationMethod = x25519_1.getX25519VerificationMethod({
        id: `${did}#${didKeyX25519.fingerprint}`,
        key: didKeyX25519,
        controller: did,
    });
    const didDocBuilder = getSignatureKeyBase({ did, key, verificationMethod });
    didDocBuilder
        .addContext('https://w3id.org/security/suites/ed25519-2018/v1')
        .addContext('https://w3id.org/security/suites/x25519-2019/v1')
        .addKeyAgreement(x25519VerificationMethod);
    return didDocBuilder.build();
}
function getX25519DidDoc(did, key) {
    const verificationMethod = x25519_1.getX25519VerificationMethod({ id: `${did}#${key.fingerprint}`, key, controller: did });
    const document = new DidDocumentBuilder_1.DidDocumentBuilder(did)
        .addKeyAgreement(verificationMethod)
        .addContext('https://w3id.org/security/suites/x25519-2019/v1')
        .build();
    return document;
}
function getBls12381g2DidDoc(did, key) {
    const verificationMethod = bls12381g2_1.getBls12381g2VerificationMethod(did, key);
    return getSignatureKeyBase({
        did,
        key,
        verificationMethod,
    })
        .addContext('https://w3id.org/security/bbs/v1')
        .build();
}
function getSignatureKeyBase({ did, key, verificationMethod, }) {
    const keyId = `${did}#${key.fingerprint}`;
    return new DidDocumentBuilder_1.DidDocumentBuilder(did)
        .addVerificationMethod(verificationMethod)
        .addAuthentication(keyId)
        .addAssertionMethod(keyId)
        .addCapabilityDelegation(keyId)
        .addCapabilityInvocation(keyId);
}
//# sourceMappingURL=keyDidDocument.js.map