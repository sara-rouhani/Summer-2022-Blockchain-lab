import type { AgentConfig } from '../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../agent/Handler';
import type { DidRepository } from '../../dids/repository';
import type { OutOfBandService } from '../../oob/OutOfBandService';
import type { MediationRecipientService } from '../../routing/services/MediationRecipientService';
import type { DidExchangeProtocol } from '../DidExchangeProtocol';
import { DidExchangeRequestMessage } from '../messages';
export declare class DidExchangeRequestHandler implements Handler {
    private didExchangeProtocol;
    private outOfBandService;
    private agentConfig;
    private mediationRecipientService;
    private didRepository;
    supportedMessages: (typeof DidExchangeRequestMessage)[];
    constructor(agentConfig: AgentConfig, didExchangeProtocol: DidExchangeProtocol, outOfBandService: OutOfBandService, mediationRecipientService: MediationRecipientService, didRepository: DidRepository);
    handle(messageContext: HandlerInboundMessage<DidExchangeRequestHandler>): Promise<import("../../../types").OutboundMessage<import("../messages").DidExchangeResponseMessage> | undefined>;
}
