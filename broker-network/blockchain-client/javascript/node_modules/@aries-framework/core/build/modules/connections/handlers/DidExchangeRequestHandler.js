"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidExchangeRequestHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const AriesFrameworkError_1 = require("../../../error/AriesFrameworkError");
const OutOfBandState_1 = require("../../oob/domain/OutOfBandState");
const messages_1 = require("../messages");
class DidExchangeRequestHandler {
    constructor(agentConfig, didExchangeProtocol, outOfBandService, mediationRecipientService, didRepository) {
        this.supportedMessages = [messages_1.DidExchangeRequestMessage];
        this.agentConfig = agentConfig;
        this.didExchangeProtocol = didExchangeProtocol;
        this.outOfBandService = outOfBandService;
        this.mediationRecipientService = mediationRecipientService;
        this.didRepository = didRepository;
    }
    async handle(messageContext) {
        var _a, _b, _c;
        const { recipientKey, senderKey, message, connection } = messageContext;
        if (!recipientKey || !senderKey) {
            throw new AriesFrameworkError_1.AriesFrameworkError('Unable to process connection request without senderKey or recipientKey');
        }
        if (!((_a = message.thread) === null || _a === void 0 ? void 0 : _a.parentThreadId)) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Message does not contain 'pthid' attribute`);
        }
        const outOfBandRecord = await this.outOfBandService.findByInvitationId(message.thread.parentThreadId);
        if (!outOfBandRecord) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`OutOfBand record for message ID ${(_b = message.thread) === null || _b === void 0 ? void 0 : _b.parentThreadId} not found!`);
        }
        if (connection && !outOfBandRecord.reusable) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Connection record for non-reusable out-of-band ${outOfBandRecord.id} already exists.`);
        }
        const didRecord = await this.didRepository.findByRecipientKey(senderKey);
        if (didRecord) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Did record for sender key ${senderKey.fingerprint} already exists.`);
        }
        // TODO Shouldn't we check also if the keys match the keys from oob invitation services?
        if (outOfBandRecord.state === OutOfBandState_1.OutOfBandState.Done) {
            throw new AriesFrameworkError_1.AriesFrameworkError('Out-of-band record has been already processed and it does not accept any new requests');
        }
        const connectionRecord = await this.didExchangeProtocol.processRequest(messageContext, outOfBandRecord);
        if ((_c = connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.autoAcceptConnection) !== null && _c !== void 0 ? _c : this.agentConfig.autoAcceptConnections) {
            // TODO We should add an option to not pass routing and therefore do not rotate keys and use the keys from the invitation
            // TODO: Allow rotation of keys used in the invitation for new ones not only when out-of-band is reusable
            const routing = outOfBandRecord.reusable ? await this.mediationRecipientService.getRouting() : undefined;
            const message = await this.didExchangeProtocol.createResponse(connectionRecord, outOfBandRecord, routing);
            return helpers_1.createOutboundMessage(connectionRecord, message, outOfBandRecord);
        }
    }
}
exports.DidExchangeRequestHandler = DidExchangeRequestHandler;
//# sourceMappingURL=DidExchangeRequestHandler.js.map