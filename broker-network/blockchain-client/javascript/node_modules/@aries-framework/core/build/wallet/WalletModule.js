"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletModule = void 0;
const tsyringe_1 = require("tsyringe");
const AgentConfig_1 = require("../agent/AgentConfig");
const constants_1 = require("../constants");
const storage_1 = require("../storage");
const updates_1 = require("../storage/migration/updates");
const WalletError_1 = require("./error/WalletError");
const WalletNotFoundError_1 = require("./error/WalletNotFoundError");
let WalletModule = class WalletModule {
    constructor(wallet, storageUpdateService, agentConfig) {
        this.wallet = wallet;
        this.storageUpdateService = storageUpdateService;
        this.logger = agentConfig.logger;
    }
    get isInitialized() {
        return this.wallet.isInitialized;
    }
    get isProvisioned() {
        return this.wallet.isProvisioned;
    }
    get walletConfig() {
        return this._walletConfig;
    }
    async initialize(walletConfig) {
        this.logger.info(`Initializing wallet '${walletConfig.id}'`, walletConfig);
        if (this.isInitialized) {
            throw new WalletError_1.WalletError('Wallet instance already initialized. Close the currently opened wallet before re-initializing the wallet');
        }
        // Open wallet, creating if it doesn't exist yet
        try {
            await this.open(walletConfig);
        }
        catch (error) {
            // If the wallet does not exist yet, create it and try to open again
            if (error instanceof WalletNotFoundError_1.WalletNotFoundError) {
                // Keep the wallet open after creating it, this saves an extra round trip of closing/opening
                // the wallet, which can save quite some time.
                await this.createAndOpen(walletConfig);
            }
            else {
                throw error;
            }
        }
    }
    async createAndOpen(walletConfig) {
        // Always keep the wallet open, as we still need to store the storage version in the wallet.
        await this.wallet.createAndOpen(walletConfig);
        this._walletConfig = walletConfig;
        // Store the storage version in the wallet
        await this.storageUpdateService.setCurrentStorageVersion(updates_1.CURRENT_FRAMEWORK_STORAGE_VERSION);
    }
    async create(walletConfig) {
        await this.createAndOpen(walletConfig);
        await this.close();
    }
    async open(walletConfig) {
        await this.wallet.open(walletConfig);
        this._walletConfig = walletConfig;
    }
    async close() {
        await this.wallet.close();
    }
    async rotateKey(walletConfig) {
        await this.wallet.rotateKey(walletConfig);
    }
    async delete() {
        await this.wallet.delete();
    }
    async export(exportConfig) {
        await this.wallet.export(exportConfig);
    }
    async import(walletConfig, importConfig) {
        await this.wallet.import(walletConfig, importConfig);
    }
};
WalletModule = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __param(0, tsyringe_1.inject(constants_1.InjectionSymbols.Wallet)),
    __metadata("design:paramtypes", [Object, storage_1.StorageUpdateService,
        AgentConfig_1.AgentConfig])
], WalletModule);
exports.WalletModule = WalletModule;
//# sourceMappingURL=WalletModule.js.map