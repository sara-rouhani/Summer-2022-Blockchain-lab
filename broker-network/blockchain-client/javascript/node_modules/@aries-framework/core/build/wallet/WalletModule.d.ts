import type { WalletConfig, WalletConfigRekey, WalletExportImportConfig } from '../types';
import { AgentConfig } from '../agent/AgentConfig';
import { StorageUpdateService } from '../storage';
import { Wallet } from './Wallet';
export declare class WalletModule {
    private wallet;
    private storageUpdateService;
    private logger;
    private _walletConfig?;
    constructor(wallet: Wallet, storageUpdateService: StorageUpdateService, agentConfig: AgentConfig);
    get isInitialized(): boolean;
    get isProvisioned(): boolean;
    get walletConfig(): WalletConfig | undefined;
    initialize(walletConfig: WalletConfig): Promise<void>;
    createAndOpen(walletConfig: WalletConfig): Promise<void>;
    create(walletConfig: WalletConfig): Promise<void>;
    open(walletConfig: WalletConfig): Promise<void>;
    close(): Promise<void>;
    rotateKey(walletConfig: WalletConfigRekey): Promise<void>;
    delete(): Promise<void>;
    export(exportConfig: WalletExportImportConfig): Promise<void>;
    import(walletConfig: WalletConfig, importConfig: WalletExportImportConfig): Promise<void>;
}
